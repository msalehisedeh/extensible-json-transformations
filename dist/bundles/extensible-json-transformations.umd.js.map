{"version":3,"file":"extensible-json-transformations.umd.js.map","sources":["ng://extensible-json-transformations/src/app/extensible-json-transformations/components/inquirer.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/components/transformations.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/components/extensible-json-transformations.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"],"sourcesContent":["/*\r\n * Intentionally avoiding use of map call on list to reduce the call stack numbers.\r\n * On large scale JSON, call stack becomes a problem to be avoided.\r\n */\r\n\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match?: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport interface QueryOperation {\r\n    name: string,\r\n    args?: QueryOperation[]\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                for (let q = 0; q < this.path.length; q++) {\r\n                    const item = pItem[q];\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if (x && x !== null) {\r\n                        list.push(x);\r\n                    }\r\n                };\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              for (let q = 0; q < this.path.length; q++) {\r\n                const item = pItem[q];\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              }\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Inquirer  {\r\n\r\n    private supportedMethods = {};\r\n    private templates = {};\r\n    private rootNode;\r\n    private contextNode; // should be set before any call is made... this is to avoid call stack overflow in extremelt large JSON\r\n    private globalPool = {};\r\n    private pathPool = {};// to avoid stackoverflow... and perform faster\r\n\r\n    constructor() {\r\n        this.addSupportingMethod(\"valueOf\", this.valueOf);\r\n        this.addSupportingMethod(\"each\", this.each);\r\n        this.addSupportingMethod(\"split\", this.split);\r\n        this.addSupportingMethod(\"concat\", this.concatenate);\r\n        this.addSupportingMethod(\"enlist\", this.enlist);\r\n        this.addSupportingMethod(\"join\", this.join);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"style\", this.style);\r\n        this.addSupportingMethod(\"match\", this.match);\r\n        this.addSupportingMethod(\"apply\", this.apply);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"offPool\", this.offPool);\r\n    }\r\n\r\n    private jXPathFor(path: string) {\r\n        let p:JXPath = this.pathPool[path];\r\n        if (!p) {\r\n            p = new JXPath(path);\r\n            this.pathPool[path] = p;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    setRootNode(node:any) {\r\n        this.rootNode = this.nodeList(node);\r\n        this.initPools(this.templates);\r\n    }\r\n    setContextNode(node) {\r\n        this.contextNode = node;\r\n    }\r\n    templateForName(name) {\r\n        return this.templates[name];\r\n    }\r\n    // if node is null, root node will be used.\r\n    nodeList(node) {\r\n        const item = node === null ? this.rootNode : node;\r\n        let list;\r\n\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             for (let t = 0; t < x.length; t++) {\r\n                const xItem = x[t];\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n            }\r\n         }\r\n         return list;\r\n    }\r\n\r\n    // performs query of nested function calls on the given node.\r\n    query(command:string, node) {\r\n        const mothods =this.toQueryOperation(command);\r\n\r\n        if (node instanceof Array) {\r\n            let list = [];\r\n            for (let q = 0; q < node.length; q++) {\r\n                const nodeItem = node[q];\r\n                list = list.concat(this.invoke(mothods, nodeItem))\r\n            };\r\n            return list;\r\n        }\r\n        return this.invoke(mothods, node);\r\n    }\r\n\r\n    // performs query with given list of query opertations\r\n    invoke(operation:QueryOperation, node) {\r\n        let list:any = [];\r\n        if ((typeof node === \"object\") && (node instanceof Array) && node.length === 0) {\r\n            list = [];\r\n        } else if (typeof operation === 'object') {\r\n            const f = this.supportedMethods[operation.name];\r\n            if (f) {\r\n                if (operation.args instanceof Array) {\r\n                    for (let a = 0; a < operation.args.length; a++) {\r\n                        const arg = operation.args[a]\r\n                        if (arg.name) {\r\n                            list.push(this.invoke(arg, node));\r\n                        } else {\r\n                            list.push(arg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    list.push(operation.args);\r\n                }\r\n                // list.push(node);\r\n                const oldContext = this.contextNode;\r\n                this.contextNode = node;\r\n                list = f.apply(this, list);\r\n                this.contextNode = oldContext;\r\n            } else {\r\n                list = operation.name;\r\n            }\r\n        } else {\r\n            list = operation;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2]\r\n    concatenate(...args) {\r\n        const left = args[0];\r\n        const delim= args[1];\r\n        const right= args[2];\r\n        const result = [];\r\n\r\n        if (left instanceof Array) {\r\n            if (right instanceof Array) {\r\n                if (left.length > right.length) {\r\n                    for (let q = 0; q < left.length; q++) {\r\n                        result.push( left[q] + delim + (right.length > q ? right[q] : \"\"));\r\n                    };\r\n                } else {\r\n                    for (let q = 0; q < right.length; q++) {\r\n                        result.push( (left.length > q ? left[q] : \"\") + delim + right[q]);\r\n                    };\r\n                }\r\n            } else {\r\n                for (let q = 0; q < left.length; q++) {\r\n                    result.push( left[q] + delim + right);\r\n                };\r\n            }\r\n        } else {\r\n            if (right instanceof Array) {\r\n                for (let q = 0; q < right.length; q++) {\r\n                    result.push( left + delim + right[q]);\r\n                };\r\n            } else {\r\n                result.push(left + delim + right);\r\n            }\r\n        }\r\n        return result.length > 1 ? result : result[0];\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1]\r\n    split(...args) {\r\n        return args[0] ? args[0].split(args[1]) : [];\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    valueOf(...args) {\r\n        const jpath = this.jXPathFor(args[0]);\r\n        return jpath.valueOf(this.contextNode);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1]\r\n    each(...args) {\r\n        const list = [];\r\n        const method = {name: \"valueOf\", args: args[1]};\r\n        \r\n        for (let q = 0; q < args[0].length; q++) {\r\n            const node = args[0][q];\r\n            list.push(this.invoke(method, node));\r\n        };\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    enlist(...args) {\r\n        const list = [];\r\n        args.map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    join(...args) {\r\n        return args[0].length > 1 ? args[0].join(args[1]) : args[0];\r\n    }\r\n    // apply(template,path,array): apply the template in root context for each value \r\n    // that matches the given path. args[0] name to apply\r\n    apply(...args) {\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const values = args[2];\r\n        let list = [];\r\n\r\n        for (let c = 0; c < this.rootNode.length; c++) {\r\n            const node = this.rootNode[c];\r\n            const value = path.nodeOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,\"=\", values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(node);\r\n                if (this.evaluateOperation(x,\"=\", values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        };\r\n        if (list.length) {\r\n            list = this.style(args[0], list);\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    match(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, this.contextNode)\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            for (let c = 0; c < nodes.length; c++) {\r\n                const node = nodes[c];\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    for (let d = 0; d < value.length; d++) {\r\n                        const v = value[d];\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return list;\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    filter(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        for (let a = 0; a < this.contextNode.length; a++) {\r\n            const node = this.contextNode[a];\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    select(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        let list = [];\r\n        if (this.contextNode instanceof Array) {\r\n            for (let d = 0; d < this.contextNode.length; d++) {\r\n                const node = this.contextNode[d];\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        } else {\r\n            const value = path.nodeOf(this.contextNode);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    style(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        if (args[1] instanceof Array) {\r\n            for (let a = 0; a < args[1].length; a++) {\r\n                const item = args[1][a];\r\n                const node = {};\r\n                for (let d = 0; d < attrs.length; d++) {\r\n                    const attr = attrs[d];\r\n                    node[attr] = this.invoke(template.style[attr], item);\r\n                }\r\n                result.push(node);\r\n            }\r\n        } else {\r\n            const node = {};\r\n            for (let d = 0; d < attrs.length; d++) {\r\n                const attr = attrs[d];\r\n                node[attr] = this.invoke(template.style[attr], args[1]);\r\n            }\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }\r\n    addSupportingMethod(name, method) {\r\n        this.supportedMethods[name] = method;\r\n    }\r\n     private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    toQueryOperation(methods) {\r\n        const operations = methods.replace(/([^']+)|('[^']+')/g, function($0, $1, $2) {\r\n            if ($1) {\r\n                return $1.replace(/\\s/g, '');\r\n            } else {\r\n                return $2; \r\n            } \r\n        }).replace(/'[^']+'/g, function (match) {\r\n            return match.replace(/,/g, '~');\r\n        });\r\n        return this.toFunctions(operations);\r\n    }\r\n    private toFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for (let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if (item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.toFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.toFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ',')),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    } else {\r\n                        const x = this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ','));\r\n                        if (x.indexOf('(') < 0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }\r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing ')'\",\r\n                stack: new Error().stack\r\n            };\r\n        } else if (i<0 && j>0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing '('\",\r\n                stack: new Error().stack\r\n            };\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let nodeList = nodes;\r\n\r\n        if (template.context === \"root\") {\r\n            if (!this.rootNode) {\r\n                throw {\r\n                    message:\"Unable to find root node to perform operation.\",\r\n                    stack: new Error().stack\r\n                };\r\n            }\r\n            nodeList = this.nodeList(this.rootNode);\r\n        }    \r\n        if (template.match && template.match.length) {\r\n            const path = this.jXPathFor(template.match);\r\n\r\n            for (let z = 0; z < nodeList.length; z++) {\r\n                const node = nodeList[z];\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            }       \r\n        } else if (nodes) {\r\n            list = nodeList;\r\n        }\r\n        return list;\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (operation === \"in\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (right[i].indexOf(left) >= 0){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                };\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        f = true;\r\n                        break;\r\n                    }\r\n                };\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        const keys = args[1];\r\n        if (!pool) {\r\n            throw {\r\n                message: \"Attempting to access pool '\" + args[0] + \"' that is not created.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (keys instanceof Array){\r\n            for (let z=0; z < keys.length; z++) {\r\n                const key = keys[z];\r\n                const node = pool[key];\r\n                if (node) {\r\n                    list.push(node);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            }\r\n        } else {\r\n            const node = pool[keys];\r\n            if (node) {\r\n                list.push(node);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n    initTemplates(list) {\r\n        this.templates = {};\r\n        for (let i=0; i < list.length; i++){\r\n            const template: any= list[i];\r\n            const styles = Object.keys(template.style)\r\n            for (let j = 0; j < styles.length; j++) {\r\n                const key = styles[j];\r\n                const method = template.style[key];\r\n                if (typeof method === \"string\") {\r\n                    template.style[key] = this.toQueryOperation(method);\r\n                }\r\n            }\r\n            this.templates[template.name] = template;\r\n        }\r\n    }\r\n    initPools(templates) {\r\n        const list = Object.keys(templates);\r\n        if (list.length === 0) {\r\n            throw {\r\n                message: \"Missing Template definitions.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (!this.rootNode) {\r\n            throw {\r\n                message: \"Unable to find root node to perform operation.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        this.globalPool = {};\r\n\r\n        for (let i=0; i < list.length; i++){\r\n            const template: string = list[i];\r\n            const t = this.templateForName(template);\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = this.jXPathFor(t.inPool);\r\n                const match= t.match;\r\n                const nodes= this.rootNode;\r\n                if (match && t.value) {\r\n                    const mpath = this.jXPathFor(match);\r\n                    \r\n                    for (let k=0; k < nodes.length; k++){\r\n                        const v = mpath.valueOf(nodes[k]);\r\n                        if (v === t.value) {\r\n                            pool[path.valueOf(nodes[k])] = nodes[k];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let k=0; k < nodes.length; k++){\r\n                        pool[path.valueOf(nodes[k])] = nodes[k];\r\n                    }\r\n                }\r\n                this.globalPool[t.name] = pool;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { JXPath, Inquirer, Template } from './inquirer';\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private transformations: Transformations;\r\n    private inquirer:Inquirer;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.inquirer = new Inquirer();\r\n        this.transformations = transformations;\r\n        this.inquirer.initTemplates(this.transformations.templates);\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.inquirer.setRootNode(node);\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.inquirer.templateForName(this.transformations.rootTemplate);\r\n        \r\n        if (template) {\r\n            const attrs = Object.keys(template.style);\r\n            const nodeList = this.inquirer.templateNodes(template, this.inquirer.nodeList(null));\r\n    \r\n            for(let i = 0; i < nodeList.length; i++) {\r\n                const currentNode = nodeList[i];\r\n                const resultingNode = {};\r\n                for( let j = 0; j < attrs.length; j++) {\r\n                    const attr = attrs[j];\r\n                    resultingNode[attr] = this.inquirer.invoke(template.style[attr], currentNode);\r\n                };\r\n                result.push(resultingNode);\r\n            };\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.inquirer.toQueryOperation(this.transformations.onResult);\r\n            result = this.inquirer.invoke(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  @Output(\"onerror\")\r\n  onerror = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      try {\r\n        this.ontransformation.emit(this.styler.transform());\r\n      } catch(e) {\r\n        console.log(e)\r\n        this.onerror.emit(e);\r\n      }\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"],"names":["EventEmitter","Component","Input","Output","NgModule","CommonModule","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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"}
