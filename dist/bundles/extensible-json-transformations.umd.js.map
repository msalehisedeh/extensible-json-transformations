{
  "version": 3,
  "file": "extensible-json-transformations.umd.js",
  "sources": [
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/extensible-json-transformations.module.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/extensible-json-transformations.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/transformations.ts"
  ],
  "sourcesContent": [
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n",
    "/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      this.ontransformation.emit(this.styler.transform());\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n",
    "import { JsonPipe } from \"@angular/common\";\r\n\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                pItem.map( (item) => {\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if(x && x !== null) {\r\n                    list.push(x);\r\n                    }\r\n                });\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              pItem.map( (item) => {\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              });\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private templates = {};\r\n    private globalPool = {};\r\n    private supportedMethods = {};\r\n    private transformations: Transformations;\r\n    private rootNode;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.transformations = transformations;\r\n        this.registerMethods();\r\n        this.prepareTransformations();\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.rootNode = node;\r\n        this.globalPool = {};\r\n        this.preparePools();\r\n    }\r\n    private nodeList(item) {\r\n        let list;\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             x.map( (xItem) => {\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                 } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n             })\r\n         }\r\n         return list;\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.templates[this.transformations.rootTemplate];\r\n        \r\n        if (template) {\r\n            const list = this.nodeList(this.rootNode);\r\n            const attrs = Object.keys(template.style);\r\n    \r\n            list.map( (item) => {\r\n                const node = {};\r\n                attrs.map( (attr) => {\r\n                    node[attr] = this.execute(template.style[attr], item);\r\n                });\r\n                result.push(node);\r\n            });\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.parseFunctions(this.transformations.onResult);\r\n            result = this.execute(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // apply(template,path,array): apply the template in current context for each value \r\n    // that matches the given path. args[0] name to apply, args[1] node\r\n    public apply(...args) {\r\n        return this.match(args[0],args[1],\"=\",args[2],args[3]);\r\n    }\r\n\r\n\r\n    private execute(x, node) {\r\n        let list = [];\r\n        if (typeof x === 'object') {\r\n            if (x.args instanceof Array) {\r\n                if (x.args.length)\r\n                x.args.map( (arg) => {\r\n                    if (arg.name) {\r\n                        list.push(this.execute(arg, node));\r\n                    } else {\r\n                        list.push(arg);\r\n                    }\r\n                });\r\n            } else {\r\n                list.push(x.args);\r\n            }\r\n            list.push(node);\r\n            const f = this.supportedMethods[x.name];\r\n            if (f) {\r\n                list = f.apply(this, list);\r\n            } else {\r\n                list = x.name;\r\n            }\r\n        } else {\r\n            list = x;\r\n        }\r\n        return list;\r\n    }\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2], node args[3]\r\n    private concatenate(...args) {\r\n        return args.slice(0, args.length - 1).join(\"\");\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1], node args[2]\r\n    private split(...args) {\r\n        return args[0].split(args[1]);\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    private valueOf(...args) {\r\n        const jpath = new JXPath(args[0]);\r\n        return jpath.valueOf(args[1]);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1], node args[2]\r\n    private each(...args) {\r\n        const list = [];\r\n        args[0].map( (item) => {\r\n            const method = {\r\n                name: \"valueOf\",\r\n                args: args[1]\r\n            }\r\n            list.push(this.execute(method, item));\r\n        });\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    private enlist(...args) {\r\n        const list = [];\r\n        args.slice(0, args.length - 1).map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    private join(...args) {\r\n        return args[0].join(args[1]);\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                right.map( (k)=> {\r\n                    if(left === k){\r\n                        result = true;\r\n                    }\r\n                });\r\n            } else if (operation === \"in\") {\r\n                right.map( (k)=> {\r\n                    if(k.indexOf(left) >= 0){\r\n                        result = true;\r\n                    }\r\n                });\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                right.map( (k)=> {\r\n                    if(left === k){\r\n                        f = true;\r\n                    }\r\n                });\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    private templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let n = this.nodeList(this.rootNode);\r\n        n = (template.context === \"root\") ? n : nodes;\r\n    \r\n        if(template.match && template.match.length) {\r\n            const path = new JXPath(template.match);\r\n\r\n            n.map( (node) => {\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            });         \r\n        } else if(nodes) {\r\n            list = n;\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    private match(...args) {\r\n        const template:Template = this.templates[args[0]];\r\n\r\n        if (!template) {\r\n            throw \"Missing Template definition for '\" + args[0] + \"'.\";\r\n        }\r\n        const path = new JXPath(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, args[4])\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            nodes.map( (node) => {\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    value.map((v)=>{\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    });\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                value.map((v)=>{\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                });\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return this.style(args[0], list);\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    private filter(...args) {\r\n        const path = new JXPath(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        args[3].map( (node) => {\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                value.map((v)=>{\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                });\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        });\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    private select(...args) {\r\n        const path = new JXPath(args[0]);\r\n        let list = [];\r\n        if(args[1] instanceof Array) {\r\n            args[1].map( (node) => {\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            });\r\n        } else {\r\n            const value = path.nodeOf(args[1]);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    private style(...args) {\r\n        const template:Template = this.templates[args[0]];\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        args[1].map( (item) => {\r\n            const node = {};\r\n            attrs.map( (attr) => {\r\n                node[attr] = this.execute(template.style[attr], item);\r\n            });\r\n            result.push(node);\r\n        })\r\n        return result;\r\n    }\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        if (!pool) {\r\n            throw \"Attempting to access pool '\" + args[0] + \"' that is not created.\"\r\n        }\r\n        if (args[1] instanceof Array){\r\n            args[1].map( (key) => {\r\n                const x = pool[key];\r\n                if(x) {\r\n                    list.push(x);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            });\r\n        } else {\r\n            const x = pool[args[1]];\r\n            if(x) {\r\n                list.push(x);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n\r\n    private registerMethods() {\r\n        this.supportedMethods[\"apply\"] = this.apply;\r\n        this.supportedMethods[\"valueOf\"] = this.valueOf;\r\n        this.supportedMethods[\"each\"] = this.each;\r\n        this.supportedMethods[\"split\"] = this.split;\r\n        this.supportedMethods[\"concat\"] = this.concatenate;\r\n        this.supportedMethods[\"enlist\"] = this.enlist;\r\n        this.supportedMethods[\"join\"] = this.join;\r\n        this.supportedMethods[\"match\"] = this.match;\r\n        this.supportedMethods[\"filter\"] = this.filter;\r\n        this.supportedMethods[\"select\"] = this.select;\r\n        this.supportedMethods[\"style\"] = this.style;\r\n        this.supportedMethods[\"offPool\"] = this.offPool;\r\n    }\r\n    private prepareTransformations() {\r\n\r\n        const list = this.transformations.templates;\r\n        list.map( (template: any) => {\r\n            Object.keys(template.style).map( (key) => {\r\n                template.style[key] = this.parseFunctions(template.style[key]);\r\n            });\r\n            this.templates[template.name] = template;\r\n        });\r\n    }\r\n    private preparePools() {\r\n        const list = Object.keys(this.templates);\r\n        list.map( (template: any) => {\r\n            const t = this.templates[template];\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = new JXPath(t.inPool);\r\n                const path2= path.fromLast();\r\n                const nodes= path.nodeOf(this.rootNode);\r\n                this.globalPool[t.name] = {};\r\n\r\n                if (nodes instanceof Array) {\r\n                    nodes.map( (node) => {\r\n                        this.globalPool[t.name][path2.valueOf(node)] = node;\r\n                    });\r\n                } else {\r\n                    this.globalPool[t.name][path2.valueOf(nodes)] = nodes;\r\n                }\r\n            }\r\n        });  \r\n    }\r\n    private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    private parseFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for(let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if(item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.parseFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.parseFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex)),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    }else if (\r\n                        (item[cindex - 1] === '\\'' || (item[cindex - 1] === ' ' && item[cindex - 2] === '\\'')) && \r\n                        (((cindex < item.length-1) && item[cindex + 1] === '\\'') || \r\n                            ((cindex < item.length-2) && item[cindex + 1] === ' ' && item[cindex + 2] === '\\''))) {\r\n                        if (json instanceof Array) {\r\n                            json.push(\",\");\r\n                        } else {\r\n                            json.args.push(\",\");\r\n                        }\r\n                        k = cindex+1;\r\n                    } else {\r\n                        const x = item.substring(k+1, cindex);\r\n                        if (x.indexOf('\\'')<0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }        \r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw \"incorrect method call declaration. Missing ')'\"\r\n        } else if (i<0 && j>0) {\r\n            throw \"incorrect method call declaration. Missing '('\"\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).trim()));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).trim()));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n}\r\n"
  ],
  "names": [
    "CUSTOM_ELEMENTS_SCHEMA",
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "Component",
    "EventEmitter"
  ],
  "mappings": "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"
}
