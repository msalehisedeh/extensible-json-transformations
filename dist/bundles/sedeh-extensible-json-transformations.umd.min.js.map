{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/inquirer.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/transformations.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/extensible-json-transformations.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","JXPath","jpath","this","path","split","prototype","fromLast","nodeOf","node","_nodeOf","pItem","Array","list","q","item","x","slice","push","valueOf","_valueOf","Inquirer","supportedMethods","templates","globalPool","pathPool","addSupportingMethod","each","concatenate","enlist","join","filter","select","style","match","apply","offPool","jXPathFor","p","setRootNode","rootNode","nodeList","initPools","setContextNode","contextNode","templateForName","name","keys","t","xItem","concat","query","command","mothods","toQueryOperation","nodeItem","invoke","operation","f","args","a","arg","oldContext","_i","left","delim","right","result","method","map","path2","values","value","v","evaluateOperation","template","message","stack","Error","nodes","templateNodes","attrs","attr","removeQuotes","str","substring","methods","operations","replace","$0","$1","$2","toFunctions","j","k","json","cindex","isArry","indexOf","context","z","parseFloat","pool","initTemplates","styles","inPool","mpath","Styler","transformations","inquirer","changeRootNode","transform","rootTemplate","currentNode","resultingNode","onResult","functions","XjsltComponent","ontransformation","EventEmitter","onerror","ngOnInit","styler","emit","e","console","log","ngOnChanges","chages","undefined","setTimeout","bind","tslib_1.__decorate","Input","Output","Component","selector","XjsltModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\r\n * Intentionally avoiding use of map call on list to reduce the call stack numbers.\r\n * On large scale JSON, call stack becomes a problem to be avoided.\r\n */\r\n\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match?: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport interface QueryOperation {\r\n    name: string,\r\n    args?: QueryOperation[]\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                for (let q = 0; q < this.path.length; q++) {\r\n                    const item = pItem[q];\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if (x && x !== null) {\r\n                        list.push(x);\r\n                    }\r\n                };\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              for (let q = 0; q < this.path.length; q++) {\r\n                const item = pItem[q];\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              }\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Inquirer  {\r\n\r\n    private supportedMethods = {};\r\n    private templates = {};\r\n    private rootNode;\r\n    private contextNode; // should be set before any call is made... this is to avoid call stack overflow in extremelt large JSON\r\n    private globalPool = {};\r\n    private pathPool = {};// to avoid stackoverflow... and perform faster\r\n\r\n    constructor() {\r\n        this.addSupportingMethod(\"valueOf\", this.valueOf);\r\n        this.addSupportingMethod(\"each\", this.each);\r\n        this.addSupportingMethod(\"split\", this.split);\r\n        this.addSupportingMethod(\"concat\", this.concatenate);\r\n        this.addSupportingMethod(\"enlist\", this.enlist);\r\n        this.addSupportingMethod(\"join\", this.join);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"style\", this.style);\r\n        this.addSupportingMethod(\"match\", this.match);\r\n        this.addSupportingMethod(\"apply\", this.apply);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"offPool\", this.offPool);\r\n    }\r\n\r\n    private jXPathFor(path: string) {\r\n        let p:JXPath = this.pathPool[path];\r\n        if (!p) {\r\n            p = new JXPath(path);\r\n            this.pathPool[path] = p;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    setRootNode(node:any) {\r\n        this.rootNode = this.nodeList(node);\r\n        this.initPools(this.templates);\r\n    }\r\n    setContextNode(node) {\r\n        this.contextNode = node;\r\n    }\r\n    templateForName(name) {\r\n        return this.templates[name];\r\n    }\r\n    // if node is null, root node will be used.\r\n    nodeList(node) {\r\n        const item = node === null ? this.rootNode : node;\r\n        let list;\r\n\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             for (let t = 0; t < x.length; t++) {\r\n                const xItem = x[t];\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n            }\r\n         }\r\n         return list;\r\n    }\r\n\r\n    // performs query of nested function calls on the given node.\r\n    query(command:string, node) {\r\n        const mothods =this.toQueryOperation(command);\r\n\r\n        if (node instanceof Array) {\r\n            let list = [];\r\n            for (let q = 0; q < node.length; q++) {\r\n                const nodeItem = node[q];\r\n                list = list.concat(this.invoke(mothods, nodeItem))\r\n            };\r\n            return list;\r\n        }\r\n        return this.invoke(mothods, node);\r\n    }\r\n\r\n    // performs query with given list of query opertations\r\n    invoke(operation:QueryOperation, node) {\r\n        let list:any = [];\r\n        if ((typeof node === \"object\") && (node instanceof Array) && node.length === 0) {\r\n            list = [];\r\n        } else if (typeof operation === 'object') {\r\n            const f = this.supportedMethods[operation.name];\r\n            if (f) {\r\n                if (operation.args instanceof Array) {\r\n                    for (let a = 0; a < operation.args.length; a++) {\r\n                        const arg = operation.args[a]\r\n                        if (arg.name) {\r\n                            list.push(this.invoke(arg, node));\r\n                        } else {\r\n                            list.push(arg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    list.push(operation.args);\r\n                }\r\n                // list.push(node);\r\n                const oldContext = this.contextNode;\r\n                this.contextNode = node;\r\n                list = f.apply(this, list);\r\n                this.contextNode = oldContext;\r\n            } else {\r\n                list = operation.name;\r\n            }\r\n        } else {\r\n            list = operation;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2]\r\n    concatenate(...args) {\r\n        const left = args[0];\r\n        const delim= args[1];\r\n        const right= args[2];\r\n        const result = [];\r\n\r\n        if (left instanceof Array) {\r\n            if (right instanceof Array) {\r\n                if (left.length > right.length) {\r\n                    for (let q = 0; q < left.length; q++) {\r\n                        result.push( left[q] + delim + (right.length > q ? right[q] : \"\"));\r\n                    };\r\n                } else {\r\n                    for (let q = 0; q < right.length; q++) {\r\n                        result.push( (left.length > q ? left[q] : \"\") + delim + right[q]);\r\n                    };\r\n                }\r\n            } else {\r\n                for (let q = 0; q < left.length; q++) {\r\n                    result.push( left[q] + delim + right);\r\n                };\r\n            }\r\n        } else {\r\n            if (right instanceof Array) {\r\n                for (let q = 0; q < right.length; q++) {\r\n                    result.push( left + delim + right[q]);\r\n                };\r\n            } else {\r\n                result.push(left + delim + right);\r\n            }\r\n        }\r\n        return result.length > 1 ? result : result[0];\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1]\r\n    split(...args) {\r\n        return args[0] ? args[0].split(args[1]) : [];\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    valueOf(...args) {\r\n        const jpath = this.jXPathFor(args[0]);\r\n        return jpath.valueOf(this.contextNode);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1]\r\n    each(...args) {\r\n        const list = [];\r\n        const method = {name: \"valueOf\", args: args[1]};\r\n        \r\n        for (let q = 0; q < args[0].length; q++) {\r\n            const node = args[0][q];\r\n            list.push(this.invoke(method, node));\r\n        };\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    enlist(...args) {\r\n        const list = [];\r\n        args.map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    join(...args) {\r\n        return args[0].length > 1 ? args[0].join(args[1]) : args[0];\r\n    }\r\n    // apply(template,path,array): apply the template in root context for each value \r\n    // that matches the given path. args[0] name to apply\r\n    apply(...args) {\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const values = args[2];\r\n        let list = [];\r\n\r\n        for (let c = 0; c < this.rootNode.length; c++) {\r\n            const node = this.rootNode[c];\r\n            const value = path.nodeOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,\"=\", values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(node);\r\n                if (this.evaluateOperation(x,\"=\", values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        };\r\n        if (list.length) {\r\n            list = this.style(args[0], list);\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    match(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, this.contextNode)\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            for (let c = 0; c < nodes.length; c++) {\r\n                const node = nodes[c];\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    for (let d = 0; d < value.length; d++) {\r\n                        const v = value[d];\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return list;\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    filter(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        for (let a = 0; a < this.contextNode.length; a++) {\r\n            const node = this.contextNode[a];\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    select(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        let list = [];\r\n        if (this.contextNode instanceof Array) {\r\n            for (let d = 0; d < this.contextNode.length; d++) {\r\n                const node = this.contextNode[d];\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        } else {\r\n            const value = path.nodeOf(this.contextNode);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    style(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        if (args[1] instanceof Array) {\r\n            for (let a = 0; a < args[1].length; a++) {\r\n                const item = args[1][a];\r\n                const node = {};\r\n                for (let d = 0; d < attrs.length; d++) {\r\n                    const attr = attrs[d];\r\n                    node[attr] = this.invoke(template.style[attr], item);\r\n                }\r\n                result.push(node);\r\n            }\r\n        } else {\r\n            const node = {};\r\n            for (let d = 0; d < attrs.length; d++) {\r\n                const attr = attrs[d];\r\n                node[attr] = this.invoke(template.style[attr], args[1]);\r\n            }\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }\r\n    addSupportingMethod(name, method) {\r\n        this.supportedMethods[name] = method;\r\n    }\r\n     private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    toQueryOperation(methods) {\r\n        const operations = methods.replace(/([^']+)|('[^']+')/g, function($0, $1, $2) {\r\n            if ($1) {\r\n                return $1.replace(/\\s/g, '');\r\n            } else {\r\n                return $2; \r\n            } \r\n        }).replace(/'[^']+'/g, function (match) {\r\n            return match.replace(/,/g, '~');\r\n        });\r\n        return this.toFunctions(operations);\r\n    }\r\n    private toFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for (let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if (item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.toFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.toFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ',')),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    } else {\r\n                        const x = this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ','));\r\n                        if (x.indexOf('(') < 0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }\r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing ')'\",\r\n                stack: new Error().stack\r\n            };\r\n        } else if (i<0 && j>0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing '('\",\r\n                stack: new Error().stack\r\n            };\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let nodeList = nodes;\r\n\r\n        if (template.context === \"root\") {\r\n            if (!this.rootNode) {\r\n                throw {\r\n                    message:\"Unable to find root node to perform operation.\",\r\n                    stack: new Error().stack\r\n                };\r\n            }\r\n            nodeList = this.nodeList(this.rootNode);\r\n        }    \r\n        if (template.match && template.match.length) {\r\n            const path = this.jXPathFor(template.match);\r\n\r\n            for (let z = 0; z < nodeList.length; z++) {\r\n                const node = nodeList[z];\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            }       \r\n        } else if (nodes) {\r\n            list = nodeList;\r\n        }\r\n        return list;\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (operation === \"in\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (right[i].indexOf(left) >= 0){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                };\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        f = true;\r\n                        break;\r\n                    }\r\n                };\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        const keys = args[1];\r\n        if (!pool) {\r\n            throw {\r\n                message: \"Attempting to access pool '\" + args[0] + \"' that is not created.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (keys instanceof Array){\r\n            for (let z=0; z < keys.length; z++) {\r\n                const key = keys[z];\r\n                const node = pool[key];\r\n                if (node) {\r\n                    list.push(node);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            }\r\n        } else {\r\n            const node = pool[keys];\r\n            if (node) {\r\n                list.push(node);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n    initTemplates(list) {\r\n        this.templates = {};\r\n        for (let i=0; i < list.length; i++){\r\n            const template: any= list[i];\r\n            const styles = Object.keys(template.style)\r\n            for (let j = 0; j < styles.length; j++) {\r\n                const key = styles[j];\r\n                const method = template.style[key];\r\n                if (typeof method === \"string\") {\r\n                    template.style[key] = this.toQueryOperation(method);\r\n                }\r\n            }\r\n            this.templates[template.name] = template;\r\n        }\r\n    }\r\n    initPools(templates) {\r\n        const list = Object.keys(templates);\r\n        if (list.length === 0) {\r\n            throw {\r\n                message: \"Missing Template definitions.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (!this.rootNode) {\r\n            throw {\r\n                message: \"Unable to find root node to perform operation.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        this.globalPool = {};\r\n\r\n        for (let i=0; i < list.length; i++){\r\n            const template: string = list[i];\r\n            const t = this.templateForName(template);\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = this.jXPathFor(t.inPool);\r\n                const match= t.match;\r\n                const nodes= this.rootNode;\r\n                if (match && t.value) {\r\n                    const mpath = this.jXPathFor(match);\r\n                    \r\n                    for (let k=0; k < nodes.length; k++){\r\n                        const v = mpath.valueOf(nodes[k]);\r\n                        if (v === t.value) {\r\n                            pool[path.valueOf(nodes[k])] = nodes[k];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let k=0; k < nodes.length; k++){\r\n                        pool[path.valueOf(nodes[k])] = nodes[k];\r\n                    }\r\n                }\r\n                this.globalPool[t.name] = pool;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { JXPath, Inquirer, Template } from './inquirer';\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private transformations: Transformations;\r\n    private inquirer:Inquirer;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.inquirer = new Inquirer();\r\n        this.transformations = transformations;\r\n        this.inquirer.initTemplates(this.transformations.templates);\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.inquirer.setRootNode(node);\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.inquirer.templateForName(this.transformations.rootTemplate);\r\n        \r\n        if (template) {\r\n            const attrs = Object.keys(template.style);\r\n            const nodeList = this.inquirer.templateNodes(template, this.inquirer.nodeList(null));\r\n    \r\n            for(let i = 0; i < nodeList.length; i++) {\r\n                const currentNode = nodeList[i];\r\n                const resultingNode = {};\r\n                for( let j = 0; j < attrs.length; j++) {\r\n                    const attr = attrs[j];\r\n                    resultingNode[attr] = this.inquirer.invoke(template.style[attr], currentNode);\r\n                };\r\n                result.push(resultingNode);\r\n            };\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.inquirer.toQueryOperation(this.transformations.onResult);\r\n            result = this.inquirer.invoke(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  @Output(\"onerror\")\r\n  onerror = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      try {\r\n        this.ontransformation.emit(this.styler.transform());\r\n      } catch(e) {\r\n        console.log(e)\r\n        this.onerror.emit(e);\r\n      }\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"]}