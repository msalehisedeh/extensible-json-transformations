{
  "version": 3,
  "file": "extensible-json-transformations.umd.min.js",
  "sources": [
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/inquirer.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/transformations.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/extensible-json-transformations.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"
  ],
  "sourcesContent": [
    "/*\r\n * Intentionally avoiding use of map call on list to reduce the call stack numbers.\r\n * On large scale JSON, call stack becomes a problem to be avoided.\r\n */\r\n\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match?: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport interface QueryOperation {\r\n    name: string,\r\n    args?: QueryOperation[]\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                for (let q = 0; q < this.path.length; q++) {\r\n                    const item = pItem[q];\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if (x && x !== null) {\r\n                        list.push(x);\r\n                    }\r\n                };\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              for (let q = 0; q < this.path.length; q++) {\r\n                const item = pItem[q];\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              }\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Inquirer  {\r\n\r\n    private supportedMethods = {};\r\n    private templates = {};\r\n    private rootNode;\r\n    private contextNode; // should be set before any call is made... this is to avoid call stack overflow in extremelt large JSON\r\n    private globalPool = {};\r\n    private pathPool = {};// to avoid stackoverflow... and perform faster\r\n\r\n    constructor() {\r\n        this.addSupportingMethod(\"valueOf\", this.valueOf);\r\n        this.addSupportingMethod(\"each\", this.each);\r\n        this.addSupportingMethod(\"split\", this.split);\r\n        this.addSupportingMethod(\"concat\", this.concatenate);\r\n        this.addSupportingMethod(\"enlist\", this.enlist);\r\n        this.addSupportingMethod(\"join\", this.join);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"style\", this.style);\r\n        this.addSupportingMethod(\"match\", this.match);\r\n        this.addSupportingMethod(\"apply\", this.apply);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"offPool\", this.offPool);\r\n    }\r\n\r\n    private jXPathFor(path: string) {\r\n        let p:JXPath = this.pathPool[path];\r\n        if (!p) {\r\n            p = new JXPath(path);\r\n            this.pathPool[path] = p;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    setRootNode(node:any) {\r\n        this.rootNode = this.nodeList(node);\r\n        this.initPools(this.templates);\r\n    }\r\n    setContextNode(node) {\r\n        this.contextNode = node;\r\n    }\r\n    templateForName(name) {\r\n        return this.templates[name];\r\n    }\r\n    // if node is null, root node will be used.\r\n    nodeList(node) {\r\n        const item = node === null ? this.rootNode : node;\r\n        let list;\r\n\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             for (let t = 0; t < x.length; t++) {\r\n                const xItem = x[t];\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n            }\r\n         }\r\n         return list;\r\n    }\r\n\r\n    // performs query of nested function calls on the given node.\r\n    query(command:string, node) {\r\n        const mothods =this.toQueryOperation(command);\r\n\r\n        if (node instanceof Array) {\r\n            let list = [];\r\n            for (let q = 0; q < node.length; q++) {\r\n                const nodeItem = node[q];\r\n                list = list.concat(this.invoke(mothods, nodeItem))\r\n            };\r\n            return list;\r\n        }\r\n        return this.invoke(mothods, node);\r\n    }\r\n\r\n    // performs query with given list of query opertations\r\n    invoke(operation:QueryOperation, node) {\r\n        let list:any = [];\r\n        if ((typeof node === \"object\") && (node instanceof Array) && node.length === 0) {\r\n            list = [];\r\n        } else if (typeof operation === 'object') {\r\n            const f = this.supportedMethods[operation.name];\r\n            if (f) {\r\n                if (operation.args instanceof Array) {\r\n                    for (let a = 0; a < operation.args.length; a++) {\r\n                        const arg = operation.args[a]\r\n                        if (arg.name) {\r\n                            list.push(this.invoke(arg, node));\r\n                        } else {\r\n                            list.push(arg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    list.push(operation.args);\r\n                }\r\n                // list.push(node);\r\n                const oldContext = this.contextNode;\r\n                this.contextNode = node;\r\n                list = f.apply(this, list);\r\n                this.contextNode = oldContext;\r\n            } else {\r\n                list = operation.name;\r\n            }\r\n        } else {\r\n            list = operation;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2]\r\n    concatenate(...args) {\r\n        const left = args[0];\r\n        const delim= args[1];\r\n        const right= args[2];\r\n        const result = [];\r\n\r\n        if (left instanceof Array) {\r\n            if (right instanceof Array) {\r\n                if (left.length > right.length) {\r\n                    for (let q = 0; q < left.length; q++) {\r\n                        result.push( left[q] + delim + (right.length > q ? right[q] : \"\"));\r\n                    };\r\n                } else {\r\n                    for (let q = 0; q < right.length; q++) {\r\n                        result.push( (left.length > q ? left[q] : \"\") + delim + right[q]);\r\n                    };\r\n                }\r\n            } else {\r\n                for (let q = 0; q < left.length; q++) {\r\n                    result.push( left[q] + delim + right);\r\n                };\r\n            }\r\n        } else {\r\n            if (right instanceof Array) {\r\n                for (let q = 0; q < right.length; q++) {\r\n                    result.push( left + delim + right[q]);\r\n                };\r\n            } else {\r\n                result.push(left + delim + right);\r\n            }\r\n        }\r\n        return result.length > 1 ? result : result[0];\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1]\r\n    split(...args) {\r\n        return args[0] ? args[0].split(args[1]) : [];\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    valueOf(...args) {\r\n        const jpath = this.jXPathFor(args[0]);\r\n        return jpath.valueOf(this.contextNode);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1]\r\n    each(...args) {\r\n        const list = [];\r\n        const method = {name: \"valueOf\", args: args[1]};\r\n        \r\n        for (let q = 0; q < args[0].length; q++) {\r\n            const node = args[0][q];\r\n            list.push(this.invoke(method, node));\r\n        };\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    enlist(...args) {\r\n        const list = [];\r\n        args.map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    join(...args) {\r\n        return args[0].length > 1 ? args[0].join(args[1]) : args[0];\r\n    }\r\n    // apply(template,path,array): apply the template in root context for each value \r\n    // that matches the given path. args[0] name to apply\r\n    apply(...args) {\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const values = args[2];\r\n        let list = [];\r\n\r\n        for (let c = 0; c < this.rootNode.length; c++) {\r\n            const node = this.rootNode[c];\r\n            const value = path.nodeOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,\"=\", values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(node);\r\n                if (this.evaluateOperation(x,\"=\", values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        };\r\n        if (list.length) {\r\n            list = this.style(args[0], list);\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    match(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, this.contextNode)\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            for (let c = 0; c < nodes.length; c++) {\r\n                const node = nodes[c];\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    for (let d = 0; d < value.length; d++) {\r\n                        const v = value[d];\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return list;\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    filter(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        for (let a = 0; a < this.contextNode.length; a++) {\r\n            const node = this.contextNode[a];\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    select(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        let list = [];\r\n        if (this.contextNode instanceof Array) {\r\n            for (let d = 0; d < this.contextNode.length; d++) {\r\n                const node = this.contextNode[d];\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        } else {\r\n            const value = path.nodeOf(this.contextNode);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    style(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        if (args[1] instanceof Array) {\r\n            for (let a = 0; a < args[1].length; a++) {\r\n                const item = args[1][a];\r\n                const node = {};\r\n                for (let d = 0; d < attrs.length; d++) {\r\n                    const attr = attrs[d];\r\n                    node[attr] = this.invoke(template.style[attr], item);\r\n                }\r\n                result.push(node);\r\n            }\r\n        } else {\r\n            const node = {};\r\n            for (let d = 0; d < attrs.length; d++) {\r\n                const attr = attrs[d];\r\n                node[attr] = this.invoke(template.style[attr], args[1]);\r\n            }\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }\r\n    addSupportingMethod(name, method) {\r\n        this.supportedMethods[name] = method;\r\n    }\r\n     private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    toQueryOperation(methods) {\r\n        const operations = methods.replace(/([^']+)|('[^']+')/g, function($0, $1, $2) {\r\n            if ($1) {\r\n                return $1.replace(/\\s/g, '');\r\n            } else {\r\n                return $2; \r\n            } \r\n        }).replace(/'[^']+'/g, function (match) {\r\n            return match.replace(/,/g, '~');\r\n        });\r\n        return this.toFunctions(operations);\r\n    }\r\n    private toFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for (let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if (item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.toFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.toFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ',')),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    } else {\r\n                        const x = this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ','));\r\n                        if (x.indexOf('(') < 0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }\r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing ')'\",\r\n                stack: new Error().stack\r\n            };\r\n        } else if (i<0 && j>0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing '('\",\r\n                stack: new Error().stack\r\n            };\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let nodeList = nodes;\r\n\r\n        if (template.context === \"root\") {\r\n            if (!this.rootNode) {\r\n                throw {\r\n                    message:\"Unable to find root node to perform operation.\",\r\n                    stack: new Error().stack\r\n                };\r\n            }\r\n            nodeList = this.nodeList(this.rootNode);\r\n        }    \r\n        if (template.match && template.match.length) {\r\n            const path = this.jXPathFor(template.match);\r\n\r\n            for (let z = 0; z < nodeList.length; z++) {\r\n                const node = nodeList[z];\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            }       \r\n        } else if (nodes) {\r\n            list = nodeList;\r\n        }\r\n        return list;\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (operation === \"in\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (right[i].indexOf(left) >= 0){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                };\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        f = true;\r\n                        break;\r\n                    }\r\n                };\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        const keys = args[1];\r\n        if (!pool) {\r\n            throw {\r\n                message: \"Attempting to access pool '\" + args[0] + \"' that is not created.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (keys instanceof Array){\r\n            for (let z=0; z < keys.length; z++) {\r\n                const key = keys[z];\r\n                const node = pool[key];\r\n                if (node) {\r\n                    list.push(node);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            }\r\n        } else {\r\n            const node = pool[keys];\r\n            if (node) {\r\n                list.push(node);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n    initTemplates(list) {\r\n        this.templates = {};\r\n        for (let i=0; i < list.length; i++){\r\n            const template: any= list[i];\r\n            const styles = Object.keys(template.style)\r\n            for (let j = 0; j < styles.length; j++) {\r\n                const key = styles[j];\r\n                const method = template.style[key];\r\n                if (typeof method === \"string\") {\r\n                    template.style[key] = this.toQueryOperation(method);\r\n                }\r\n            }\r\n            this.templates[template.name] = template;\r\n        }\r\n    }\r\n    initPools(templates) {\r\n        const list = Object.keys(templates);\r\n        if (list.length === 0) {\r\n            throw {\r\n                message: \"Missing Template definitions.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (!this.rootNode) {\r\n            throw {\r\n                message: \"Unable to find root node to perform operation.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        this.globalPool = {};\r\n\r\n        for (let i=0; i < list.length; i++){\r\n            const template: string = list[i];\r\n            const t = this.templateForName(template);\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = this.jXPathFor(t.inPool);\r\n                const match= t.match;\r\n                const nodes= this.rootNode;\r\n                if (match && t.value) {\r\n                    const mpath = this.jXPathFor(match);\r\n                    \r\n                    for (let k=0; k < nodes.length; k++){\r\n                        const v = mpath.valueOf(nodes[k]);\r\n                        if (v === t.value) {\r\n                            pool[path.valueOf(nodes[k])] = nodes[k];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let k=0; k < nodes.length; k++){\r\n                        pool[path.valueOf(nodes[k])] = nodes[k];\r\n                    }\r\n                }\r\n                this.globalPool[t.name] = pool;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "import { JXPath, Inquirer, Template } from './inquirer';\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private transformations: Transformations;\r\n    private inquirer:Inquirer;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.inquirer = new Inquirer();\r\n        this.transformations = transformations;\r\n        this.inquirer.initTemplates(this.transformations.templates);\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.inquirer.setRootNode(node);\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.inquirer.templateForName(this.transformations.rootTemplate);\r\n        \r\n        if (template) {\r\n            const attrs = Object.keys(template.style);\r\n            const nodeList = this.inquirer.templateNodes(template, this.inquirer.nodeList(null));\r\n    \r\n            for(let i = 0; i < nodeList.length; i++) {\r\n                const currentNode = nodeList[i];\r\n                const resultingNode = {};\r\n                for( let j = 0; j < attrs.length; j++) {\r\n                    const attr = attrs[j];\r\n                    resultingNode[attr] = this.inquirer.invoke(template.style[attr], currentNode);\r\n                };\r\n                result.push(resultingNode);\r\n            };\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.inquirer.toQueryOperation(this.transformations.onResult);\r\n            result = this.inquirer.invoke(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
    "/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  @Output(\"onerror\")\r\n  onerror = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      try {\r\n        this.ontransformation.emit(this.styler.transform());\r\n      } catch(e) {\r\n        console.log(e)\r\n        this.onerror.emit(e);\r\n      }\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"
  ],
  "names": [
    "JXPath",
    "jpath",
    "this",
    "path",
    "split",
    "prototype",
    "fromLast",
    "length",
    "nodeOf",
    "node",
    "_nodeOf",
    "pItem",
    "i",
    "Array",
    "list",
    "q",
    "item",
    "x",
    "slice",
    "push",
    "valueOf",
    "_valueOf",
    "Inquirer",
    "supportedMethods",
    "templates",
    "globalPool",
    "pathPool",
    "addSupportingMethod",
    "each",
    "concatenate",
    "enlist",
    "join",
    "filter",
    "select",
    "style",
    "match",
    "apply",
    "offPool",
    "jXPathFor",
    "p",
    "setRootNode",
    "rootNode",
    "nodeList",
    "initPools",
    "setContextNode",
    "contextNode",
    "templateForName",
    "name",
    "Object",
    "keys",
    "t",
    "xItem",
    "concat",
    "query",
    "command",
    "mothods",
    "toQueryOperation",
    "nodeItem",
    "invoke",
    "operation",
    "f",
    "args",
    "a",
    "arg",
    "oldContext",
    "_i",
    "arguments",
    "left",
    "delim",
    "right",
    "result",
    "method",
    "map",
    "path2",
    "values",
    "c",
    "value",
    "d",
    "v",
    "evaluateOperation",
    "template",
    "message",
    "stack",
    "Error",
    "nodes",
    "templateNodes",
    "attrs",
    "attr",
    "removeQuotes",
    "str",
    "substring",
    "methods",
    "operations",
    "replace",
    "$0",
    "$1",
    "$2",
    "toFunctions",
    "j",
    "k",
    "json",
    "cindex",
    "isArry",
    "indexOf",
    "context",
    "z",
    "parseFloat",
    "pool",
    "initTemplates",
    "styles",
    "key",
    "inPool",
    "mpath",
    "Styler",
    "transformations",
    "inquirer",
    "changeRootNode",
    "transform",
    "rootTemplate",
    "currentNode",
    "resultingNode",
    "onResult",
    "functions",
    "XjsltComponent",
    "ontransformation",
    "EventEmitter",
    "onerror",
    "ngOnInit",
    "styler",
    "emit",
    "e",
    "console",
    "log",
    "ngOnChanges",
    "chages",
    "undefined",
    "setTimeout",
    "bind",
    "type",
    "Component",
    "selector",
    "Input",
    "Output",
    "XjsltModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
