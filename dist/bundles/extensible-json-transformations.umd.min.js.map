{"version":3,"sources":["ng://extensible-json-transformations/src/app/extensible-json-transformations/components/inquirer.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/components/transformations.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/components/extensible-json-transformations.ts","ng://extensible-json-transformations/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"],"names":["JXPath","jpath","this","path","split","prototype","fromLast","length","nodeOf","node","_nodeOf","pItem","i","Array","list","q","item","x","slice","push","valueOf","_valueOf","Inquirer","addSupportingMethod","each","concatenate","enlist","join","filter","select","style","match","apply","offPool","jXPathFor","p","pathPool","setRootNode","rootNode","nodeList","initPools","templates","setContextNode","contextNode","templateForName","name","Object","keys","t","xItem","concat","query","command","mothods","toQueryOperation","nodeItem","invoke","operation","f","supportedMethods","args","a","arg","oldContext","_i","arguments","left","delim","right","result","method","map","path2","values","c","value","d","v","evaluateOperation","template","message","stack","Error","nodes","templateNodes","attrs","attr","removeQuotes","str","substring","methods","operations","replace","$0","$1","$2","toFunctions","j","k","json","cindex","isArry","indexOf","context","z","parseFloat","pool","globalPool","initTemplates","styles","key","inPool","mpath","Styler","transformations","inquirer","changeRootNode","transform","rootTemplate","currentNode","resultingNode","onResult","functions","XjsltComponent","EventEmitter","ngOnInit","styler","ontransformation","emit","e","console","log","onerror","ngOnChanges","chages","undefined","setTimeout","bind","Component","selector","Input","Output","XjsltModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*\r\n * Intentionally avoiding use of map call on list to reduce the call stack numbers.\r\n * On large scale JSON, call stack becomes a problem to be avoided.\r\n */\r\n\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match?: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport interface QueryOperation {\r\n    name: string,\r\n    args?: QueryOperation[]\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                for (let q = 0; q < this.path.length; q++) {\r\n                    const item = pItem[q];\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if (x && x !== null) {\r\n                        list.push(x);\r\n                    }\r\n                };\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              for (let q = 0; q < this.path.length; q++) {\r\n                const item = pItem[q];\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              }\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Inquirer  {\r\n\r\n    private supportedMethods = {};\r\n    private templates = {};\r\n    private rootNode;\r\n    private contextNode; // should be set before any call is made... this is to avoid call stack overflow in extremelt large JSON\r\n    private globalPool = {};\r\n    private pathPool = {};// to avoid stackoverflow... and perform faster\r\n\r\n    constructor() {\r\n        this.addSupportingMethod(\"valueOf\", this.valueOf);\r\n        this.addSupportingMethod(\"each\", this.each);\r\n        this.addSupportingMethod(\"split\", this.split);\r\n        this.addSupportingMethod(\"concat\", this.concatenate);\r\n        this.addSupportingMethod(\"enlist\", this.enlist);\r\n        this.addSupportingMethod(\"join\", this.join);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"style\", this.style);\r\n        this.addSupportingMethod(\"match\", this.match);\r\n        this.addSupportingMethod(\"apply\", this.apply);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"offPool\", this.offPool);\r\n    }\r\n\r\n    private jXPathFor(path: string) {\r\n        let p:JXPath = this.pathPool[path];\r\n        if (!p) {\r\n            p = new JXPath(path);\r\n            this.pathPool[path] = p;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    setRootNode(node:any) {\r\n        this.rootNode = this.nodeList(node);\r\n        this.initPools(this.templates);\r\n    }\r\n    setContextNode(node) {\r\n        this.contextNode = node;\r\n    }\r\n    templateForName(name) {\r\n        return this.templates[name];\r\n    }\r\n    // if node is null, root node will be used.\r\n    nodeList(node) {\r\n        const item = node === null ? this.rootNode : node;\r\n        let list;\r\n\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             for (let t = 0; t < x.length; t++) {\r\n                const xItem = x[t];\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n            }\r\n         }\r\n         return list;\r\n    }\r\n\r\n    // performs query of nested function calls on the given node.\r\n    query(command:string, node) {\r\n        const mothods =this.toQueryOperation(command);\r\n\r\n        if (node instanceof Array) {\r\n            let list = [];\r\n            for (let q = 0; q < node.length; q++) {\r\n                const nodeItem = node[q];\r\n                list = list.concat(this.invoke(mothods, nodeItem))\r\n            };\r\n            return list;\r\n        }\r\n        return this.invoke(mothods, node);\r\n    }\r\n\r\n    // performs query with given list of query opertations\r\n    invoke(operation:QueryOperation, node) {\r\n        let list:any = [];\r\n        if ((typeof node === \"object\") && (node instanceof Array) && node.length === 0) {\r\n            list = [];\r\n        } else if (typeof operation === 'object') {\r\n            const f = this.supportedMethods[operation.name];\r\n            if (f) {\r\n                if (operation.args instanceof Array) {\r\n                    for (let a = 0; a < operation.args.length; a++) {\r\n                        const arg = operation.args[a]\r\n                        if (arg.name) {\r\n                            list.push(this.invoke(arg, node));\r\n                        } else {\r\n                            list.push(arg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    list.push(operation.args);\r\n                }\r\n                // list.push(node);\r\n                const oldContext = this.contextNode;\r\n                this.contextNode = node;\r\n                list = f.apply(this, list);\r\n                this.contextNode = oldContext;\r\n            } else {\r\n                list = operation.name;\r\n            }\r\n        } else {\r\n            list = operation;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2]\r\n    concatenate(...args) {\r\n        const left = args[0];\r\n        const delim= args[1];\r\n        const right= args[2];\r\n        const result = [];\r\n\r\n        if (left instanceof Array) {\r\n            if (right instanceof Array) {\r\n                if (left.length > right.length) {\r\n                    for (let q = 0; q < left.length; q++) {\r\n                        result.push( left[q] + delim + (right.length > q ? right[q] : \"\"));\r\n                    };\r\n                } else {\r\n                    for (let q = 0; q < right.length; q++) {\r\n                        result.push( (left.length > q ? left[q] : \"\") + delim + right[q]);\r\n                    };\r\n                }\r\n            } else {\r\n                for (let q = 0; q < left.length; q++) {\r\n                    result.push( left[q] + delim + right);\r\n                };\r\n            }\r\n        } else {\r\n            if (right instanceof Array) {\r\n                for (let q = 0; q < right.length; q++) {\r\n                    result.push( left + delim + right[q]);\r\n                };\r\n            } else {\r\n                result.push(left + delim + right);\r\n            }\r\n        }\r\n        return result.length > 1 ? result : result[0];\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1]\r\n    split(...args) {\r\n        return args[0] ? args[0].split(args[1]) : [];\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    valueOf(...args) {\r\n        const jpath = this.jXPathFor(args[0]);\r\n        return jpath.valueOf(this.contextNode);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1]\r\n    each(...args) {\r\n        const list = [];\r\n        const method = {name: \"valueOf\", args: args[1]};\r\n        \r\n        for (let q = 0; q < args[0].length; q++) {\r\n            const node = args[0][q];\r\n            list.push(this.invoke(method, node));\r\n        };\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    enlist(...args) {\r\n        const list = [];\r\n        args.map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    join(...args) {\r\n        return args[0].length > 1 ? args[0].join(args[1]) : args[0];\r\n    }\r\n    // apply(template,path,array): apply the template in root context for each value \r\n    // that matches the given path. args[0] name to apply\r\n    apply(...args) {\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const values = args[2];\r\n        let list = [];\r\n\r\n        for (let c = 0; c < this.rootNode.length; c++) {\r\n            const node = this.rootNode[c];\r\n            const value = path.nodeOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,\"=\", values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(node);\r\n                if (this.evaluateOperation(x,\"=\", values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        };\r\n        if (list.length) {\r\n            list = this.style(args[0], list);\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    match(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, this.contextNode)\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            for (let c = 0; c < nodes.length; c++) {\r\n                const node = nodes[c];\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    for (let d = 0; d < value.length; d++) {\r\n                        const v = value[d];\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return list;\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    filter(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        for (let a = 0; a < this.contextNode.length; a++) {\r\n            const node = this.contextNode[a];\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    select(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        let list = [];\r\n        if (this.contextNode instanceof Array) {\r\n            for (let d = 0; d < this.contextNode.length; d++) {\r\n                const node = this.contextNode[d];\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        } else {\r\n            const value = path.nodeOf(this.contextNode);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    style(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        if (args[1] instanceof Array) {\r\n            for (let a = 0; a < args[1].length; a++) {\r\n                const item = args[1][a];\r\n                const node = {};\r\n                for (let d = 0; d < attrs.length; d++) {\r\n                    const attr = attrs[d];\r\n                    node[attr] = this.invoke(template.style[attr], item);\r\n                }\r\n                result.push(node);\r\n            }\r\n        } else {\r\n            const node = {};\r\n            for (let d = 0; d < attrs.length; d++) {\r\n                const attr = attrs[d];\r\n                node[attr] = this.invoke(template.style[attr], args[1]);\r\n            }\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }\r\n    addSupportingMethod(name, method) {\r\n        this.supportedMethods[name] = method;\r\n    }\r\n     private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    toQueryOperation(methods) {\r\n        const operations = methods.replace(/([^']+)|('[^']+')/g, function($0, $1, $2) {\r\n            if ($1) {\r\n                return $1.replace(/\\s/g, '');\r\n            } else {\r\n                return $2; \r\n            } \r\n        }).replace(/'[^']+'/g, function (match) {\r\n            return match.replace(/,/g, '~');\r\n        });\r\n        return this.toFunctions(operations);\r\n    }\r\n    private toFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for (let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if (item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.toFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.toFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ',')),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    } else {\r\n                        const x = this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ','));\r\n                        if (x.indexOf('(') < 0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }\r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing ')'\",\r\n                stack: new Error().stack\r\n            };\r\n        } else if (i<0 && j>0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing '('\",\r\n                stack: new Error().stack\r\n            };\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let nodeList = nodes;\r\n\r\n        if (template.context === \"root\") {\r\n            if (!this.rootNode) {\r\n                throw {\r\n                    message:\"Unable to find root node to perform operation.\",\r\n                    stack: new Error().stack\r\n                };\r\n            }\r\n            nodeList = this.nodeList(this.rootNode);\r\n        }    \r\n        if (template.match && template.match.length) {\r\n            const path = this.jXPathFor(template.match);\r\n\r\n            for (let z = 0; z < nodeList.length; z++) {\r\n                const node = nodeList[z];\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            }       \r\n        } else if (nodes) {\r\n            list = nodeList;\r\n        }\r\n        return list;\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (operation === \"in\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (right[i].indexOf(left) >= 0){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                };\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        f = true;\r\n                        break;\r\n                    }\r\n                };\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        const keys = args[1];\r\n        if (!pool) {\r\n            throw {\r\n                message: \"Attempting to access pool '\" + args[0] + \"' that is not created.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (keys instanceof Array){\r\n            for (let z=0; z < keys.length; z++) {\r\n                const key = keys[z];\r\n                const node = pool[key];\r\n                if (node) {\r\n                    list.push(node);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            }\r\n        } else {\r\n            const node = pool[keys];\r\n            if (node) {\r\n                list.push(node);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n    initTemplates(list) {\r\n        this.templates = {};\r\n        for (let i=0; i < list.length; i++){\r\n            const template: any= list[i];\r\n            const styles = Object.keys(template.style)\r\n            for (let j = 0; j < styles.length; j++) {\r\n                const key = styles[j];\r\n                const method = template.style[key];\r\n                if (typeof method === \"string\") {\r\n                    template.style[key] = this.toQueryOperation(method);\r\n                }\r\n            }\r\n            this.templates[template.name] = template;\r\n        }\r\n    }\r\n    initPools(templates) {\r\n        const list = Object.keys(templates);\r\n        if (list.length === 0) {\r\n            throw {\r\n                message: \"Missing Template definitions.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (!this.rootNode) {\r\n            throw {\r\n                message: \"Unable to find root node to perform operation.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        this.globalPool = {};\r\n\r\n        for (let i=0; i < list.length; i++){\r\n            const template: string = list[i];\r\n            const t = this.templateForName(template);\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = this.jXPathFor(t.inPool);\r\n                const match= t.match;\r\n                const nodes= this.rootNode;\r\n                if (match && t.value) {\r\n                    const mpath = this.jXPathFor(match);\r\n                    \r\n                    for (let k=0; k < nodes.length; k++){\r\n                        const v = mpath.valueOf(nodes[k]);\r\n                        if (v === t.value) {\r\n                            pool[path.valueOf(nodes[k])] = nodes[k];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let k=0; k < nodes.length; k++){\r\n                        pool[path.valueOf(nodes[k])] = nodes[k];\r\n                    }\r\n                }\r\n                this.globalPool[t.name] = pool;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { JXPath, Inquirer, Template } from './inquirer';\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private transformations: Transformations;\r\n    private inquirer:Inquirer;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.inquirer = new Inquirer();\r\n        this.transformations = transformations;\r\n        this.inquirer.initTemplates(this.transformations.templates);\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.inquirer.setRootNode(node);\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.inquirer.templateForName(this.transformations.rootTemplate);\r\n        \r\n        if (template) {\r\n            const attrs = Object.keys(template.style);\r\n            const nodeList = this.inquirer.templateNodes(template, this.inquirer.nodeList(null));\r\n    \r\n            for(let i = 0; i < nodeList.length; i++) {\r\n                const currentNode = nodeList[i];\r\n                const resultingNode = {};\r\n                for( let j = 0; j < attrs.length; j++) {\r\n                    const attr = attrs[j];\r\n                    resultingNode[attr] = this.inquirer.invoke(template.style[attr], currentNode);\r\n                };\r\n                result.push(resultingNode);\r\n            };\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.inquirer.toQueryOperation(this.transformations.onResult);\r\n            result = this.inquirer.invoke(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  @Output(\"onerror\")\r\n  onerror = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      try {\r\n        this.ontransformation.emit(this.styler.transform());\r\n      } catch(e) {\r\n        console.log(e)\r\n        this.onerror.emit(e);\r\n      }\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"]}