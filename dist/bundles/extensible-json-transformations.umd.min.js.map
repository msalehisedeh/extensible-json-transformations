{
  "version": 3,
  "file": "extensible-json-transformations.umd.min.js",
  "sources": [
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/transformations.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/components/extensible-json-transformations.ts",
    "ng://extensible-json-transformations/out/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"
  ],
  "sourcesContent": [
    "import { JsonPipe } from \"@angular/common\";\r\n\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                pItem.map( (item) => {\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if(x && x !== null) {\r\n                    list.push(x);\r\n                    }\r\n                });\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              pItem.map( (item) => {\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              });\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private templates = {};\r\n    private globalPool = {};\r\n    private supportedMethods = {};\r\n    private transformations: Transformations;\r\n    private rootNode;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.transformations = transformations;\r\n        this.registerMethods();\r\n        this.prepareTransformations();\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.rootNode = node;\r\n        this.globalPool = {};\r\n        this.preparePools();\r\n    }\r\n    private nodeList(item) {\r\n        let list;\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             x.map( (xItem) => {\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                 } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n             })\r\n         }\r\n         return list;\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.templates[this.transformations.rootTemplate];\r\n        \r\n        if (template) {\r\n            const list = this.nodeList(this.rootNode);\r\n            const attrs = Object.keys(template.style);\r\n    \r\n            list.map( (item) => {\r\n                const node = {};\r\n                attrs.map( (attr) => {\r\n                    node[attr] = this.execute(template.style[attr], item);\r\n                });\r\n                result.push(node);\r\n            });\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.parseFunctions(this.transformations.onResult);\r\n            result = this.execute(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // apply(template,path,array): apply the template in current context for each value \r\n    // that matches the given path. args[0] name to apply, args[1] node\r\n    public apply(...args) {\r\n        return this.match(args[0],args[1],\"=\",args[2],args[3]);\r\n    }\r\n\r\n\r\n    private execute(x, node) {\r\n        let list = [];\r\n        if (typeof x === 'object') {\r\n            if (x.args instanceof Array) {\r\n                if (x.args.length)\r\n                x.args.map( (arg) => {\r\n                    if (arg.name) {\r\n                        list.push(this.execute(arg, node));\r\n                    } else {\r\n                        list.push(arg);\r\n                    }\r\n                });\r\n            } else {\r\n                list.push(x.args);\r\n            }\r\n            list.push(node);\r\n            const f = this.supportedMethods[x.name];\r\n            if (f) {\r\n                list = f.apply(this, list);\r\n            } else {\r\n                list = x.name;\r\n            }\r\n        } else {\r\n            list = x;\r\n        }\r\n        return list;\r\n    }\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2], node args[3]\r\n    private concatenate(...args) {\r\n        return args.slice(0, args.length - 1).join(\"\");\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1], node args[2]\r\n    private split(...args) {\r\n        return args[0].split(args[1]);\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    private valueOf(...args) {\r\n        const jpath = new JXPath(args[0]);\r\n        return jpath.valueOf(args[1]);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1], node args[2]\r\n    private each(...args) {\r\n        const list = [];\r\n        args[0].map( (item) => {\r\n            const method = {\r\n                name: \"valueOf\",\r\n                args: args[1]\r\n            }\r\n            list.push(this.execute(method, item));\r\n        });\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    private enlist(...args) {\r\n        const list = [];\r\n        args.slice(0, args.length - 1).map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    private join(...args) {\r\n        return args[0].join(args[1]);\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                right.map( (k)=> {\r\n                    if(left === k){\r\n                        result = true;\r\n                    }\r\n                });\r\n            } else if (operation === \"in\") {\r\n                right.map( (k)=> {\r\n                    if(k.indexOf(left) >= 0){\r\n                        result = true;\r\n                    }\r\n                });\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                right.map( (k)=> {\r\n                    if(left === k){\r\n                        f = true;\r\n                    }\r\n                });\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    private templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let n = this.nodeList(this.rootNode);\r\n        n = (template.context === \"root\") ? n : nodes;\r\n    \r\n        if(template.match && template.match.length) {\r\n            const path = new JXPath(template.match);\r\n\r\n            n.map( (node) => {\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            });         \r\n        } else if(nodes) {\r\n            list = n;\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    private match(...args) {\r\n        const template:Template = this.templates[args[0]];\r\n\r\n        if (!template) {\r\n            throw \"Missing Template definition for '\" + args[0] + \"'.\";\r\n        }\r\n        const path = new JXPath(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, args[4])\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            nodes.map( (node) => {\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    value.map((v)=>{\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    });\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                value.map((v)=>{\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                });\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return this.style(args[0], list);\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    private filter(...args) {\r\n        const path = new JXPath(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        args[3].map( (node) => {\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                value.map((v)=>{\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                });\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        });\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    private select(...args) {\r\n        const path = new JXPath(args[0]);\r\n        let list = [];\r\n        if(args[1] instanceof Array) {\r\n            args[1].map( (node) => {\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            });\r\n        } else {\r\n            const value = path.nodeOf(args[1]);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    private style(...args) {\r\n        const template:Template = this.templates[args[0]];\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        args[1].map( (item) => {\r\n            const node = {};\r\n            attrs.map( (attr) => {\r\n                node[attr] = this.execute(template.style[attr], item);\r\n            });\r\n            result.push(node);\r\n        })\r\n        return result;\r\n    }\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        if (!pool) {\r\n            throw \"Attempting to access pool '\" + args[0] + \"' that is not created.\"\r\n        }\r\n        if (args[1] instanceof Array){\r\n            args[1].map( (key) => {\r\n                const x = pool[key];\r\n                if(x) {\r\n                    list.push(x);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            });\r\n        } else {\r\n            const x = pool[args[1]];\r\n            if(x) {\r\n                list.push(x);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n\r\n    private registerMethods() {\r\n        this.supportedMethods[\"apply\"] = this.apply;\r\n        this.supportedMethods[\"valueOf\"] = this.valueOf;\r\n        this.supportedMethods[\"each\"] = this.each;\r\n        this.supportedMethods[\"split\"] = this.split;\r\n        this.supportedMethods[\"concat\"] = this.concatenate;\r\n        this.supportedMethods[\"enlist\"] = this.enlist;\r\n        this.supportedMethods[\"join\"] = this.join;\r\n        this.supportedMethods[\"match\"] = this.match;\r\n        this.supportedMethods[\"filter\"] = this.filter;\r\n        this.supportedMethods[\"select\"] = this.select;\r\n        this.supportedMethods[\"style\"] = this.style;\r\n        this.supportedMethods[\"offPool\"] = this.offPool;\r\n    }\r\n    private prepareTransformations() {\r\n\r\n        const list = this.transformations.templates;\r\n        list.map( (template: any) => {\r\n            Object.keys(template.style).map( (key) => {\r\n                template.style[key] = this.parseFunctions(template.style[key]);\r\n            });\r\n            this.templates[template.name] = template;\r\n        });\r\n    }\r\n    private preparePools() {\r\n        const list = Object.keys(this.templates);\r\n        list.map( (template: any) => {\r\n            const t = this.templates[template];\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = new JXPath(t.inPool);\r\n                const path2= path.fromLast();\r\n                const nodes= path.nodeOf(this.rootNode);\r\n                this.globalPool[t.name] = {};\r\n\r\n                if (nodes instanceof Array) {\r\n                    nodes.map( (node) => {\r\n                        this.globalPool[t.name][path2.valueOf(node)] = node;\r\n                    });\r\n                } else {\r\n                    this.globalPool[t.name][path2.valueOf(nodes)] = nodes;\r\n                }\r\n            }\r\n        });  \r\n    }\r\n    private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    private parseFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for(let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if(item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.parseFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.parseFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex)),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    }else if (\r\n                        (item[cindex - 1] === '\\'' || (item[cindex - 1] === ' ' && item[cindex - 2] === '\\'')) && \r\n                        (((cindex < item.length-1) && item[cindex + 1] === '\\'') || \r\n                            ((cindex < item.length-2) && item[cindex + 1] === ' ' && item[cindex + 2] === '\\''))) {\r\n                        if (json instanceof Array) {\r\n                            json.push(\",\");\r\n                        } else {\r\n                            json.args.push(\",\");\r\n                        }\r\n                        k = cindex+1;\r\n                    } else {\r\n                        const x = item.substring(k+1, cindex);\r\n                        if (x.indexOf('\\'')<0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }        \r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw \"incorrect method call declaration. Missing ')'\"\r\n        } else if (i<0 && j>0) {\r\n            throw \"incorrect method call declaration. Missing '('\"\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).trim()));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).trim()));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n}\r\n",
    "/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      this.ontransformation.emit(this.styler.transform());\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"
  ],
  "names": [
    "JXPath",
    "jpath",
    "this",
    "path",
    "split",
    "prototype",
    "fromLast",
    "length",
    "nodeOf",
    "node",
    "_nodeOf",
    "_this",
    "pItem",
    "_loop_1",
    "i",
    "Array",
    "list_1",
    "map",
    "item",
    "x",
    "slice",
    "push",
    "valueOf",
    "_valueOf",
    "_loop_2",
    "list_2",
    "Styler",
    "transformations",
    "templates",
    "globalPool",
    "supportedMethods",
    "registerMethods",
    "prepareTransformations",
    "changeRootNode",
    "rootNode",
    "preparePools",
    "nodeList",
    "list",
    "Object",
    "keys",
    "xItem",
    "concat",
    "transform",
    "result",
    "template",
    "rootTemplate",
    "attrs_1",
    "style",
    "attr",
    "execute",
    "onResult",
    "functions",
    "parseFunctions",
    "apply",
    "args",
    "_i",
    "arguments",
    "match",
    "arg",
    "name",
    "f",
    "concatenate",
    "join",
    "each",
    "method",
    "enlist",
    "evaluateOperation",
    "left",
    "operation",
    "right",
    "k",
    "indexOf",
    "f_1",
    "parseFloat",
    "templateNodes",
    "nodes",
    "n",
    "context",
    "path_1",
    "value",
    "path2",
    "values",
    "v",
    "filter",
    "select",
    "attrs",
    "offPool",
    "pool",
    "key",
    "t",
    "inPool",
    "path2_1",
    "removeQuotes",
    "str",
    "substring",
    "j",
    "c",
    "json",
    "cindex",
    "isArry",
    "trim",
    "XjsltComponent",
    "ontransformation",
    "EventEmitter",
    "ngOnInit",
    "styler",
    "emit",
    "ngOnChanges",
    "chages",
    "undefined",
    "setTimeout",
    "bind",
    "type",
    "Component",
    "selector",
    "styles",
    "Input",
    "Output",
    "XjsltModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
