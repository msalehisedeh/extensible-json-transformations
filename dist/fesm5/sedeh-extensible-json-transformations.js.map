{"version":3,"file":"sedeh-extensible-json-transformations.js.map","sources":["ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/inquirer.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/transformations.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/components/extensible-json-transformations.ts","ng://@sedeh/extensible-json-transformations/src/app/extensible-json-transformations/extensible-json-transformations.module.ts"],"sourcesContent":["/*\r\n * Intentionally avoiding use of map call on list to reduce the call stack numbers.\r\n * On large scale JSON, call stack becomes a problem to be avoided.\r\n */\r\n\r\n\r\nexport interface Template {\r\n    name: string,\r\n    match?: string,\r\n    value?: string,\r\n    context: string,\r\n    inPool?: string,\r\n    style: any\r\n}\r\n\r\nexport interface QueryOperation {\r\n    name: string,\r\n    args?: QueryOperation[]\r\n}\r\n\r\nexport class JXPath {\r\n    private path;\r\n    constructor(jpath){\r\n        this.path = jpath.split(\".\");\r\n    }\r\n    fromLast() {\r\n        return new JXPath(this.path[this.path.length - 1]);\r\n    }\r\n    nodeOf(node) {\r\n        return this._nodeOf(node, this.path);\r\n    }\r\n    private _nodeOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n                const list = [];\r\n                for (let q = 0; q < this.path.length; q++) {\r\n                    const item = pItem[q];\r\n                    const x = this._nodeOf(item[path[i]], path.slice(i+1,path.length));\r\n                    if (x && x !== null) {\r\n                        list.push(x);\r\n                    }\r\n                };\r\n                if (list.length) {\r\n                    pItem = list;\r\n                }\r\n                break;\r\n            } else {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n    valueOf(node) {\r\n        return this._valueOf(node, this.path);\r\n    }\r\n    private _valueOf(node, path: string[]) {\r\n        let pItem = node;\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            if (pItem instanceof Array) {\r\n              const list = [];\r\n              for (let q = 0; q < this.path.length; q++) {\r\n                const item = pItem[q];\r\n                list.push(this._valueOf(item[path[i]], path.slice(i+1,path.length)));\r\n              }\r\n              pItem = list;\r\n              break;\r\n            } else if (path.length) {\r\n                pItem = pItem ? pItem[path[i]] : pItem;\r\n            } else {\r\n                 pItem = pItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    }\r\n}\r\n\r\nexport class Inquirer  {\r\n\r\n    private supportedMethods = {};\r\n    private templates = {};\r\n    private rootNode;\r\n    private contextNode; // should be set before any call is made... this is to avoid call stack overflow in extremelt large JSON\r\n    private globalPool = {};\r\n    private pathPool = {};// to avoid stackoverflow... and perform faster\r\n\r\n    constructor() {\r\n        this.addSupportingMethod(\"valueOf\", this.valueOf);\r\n        this.addSupportingMethod(\"each\", this.each);\r\n        this.addSupportingMethod(\"split\", this.split);\r\n        this.addSupportingMethod(\"concat\", this.concatenate);\r\n        this.addSupportingMethod(\"enlist\", this.enlist);\r\n        this.addSupportingMethod(\"join\", this.join);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"style\", this.style);\r\n        this.addSupportingMethod(\"match\", this.match);\r\n        this.addSupportingMethod(\"apply\", this.apply);\r\n        this.addSupportingMethod(\"filter\", this.filter);\r\n        this.addSupportingMethod(\"select\", this.select);\r\n        this.addSupportingMethod(\"offPool\", this.offPool);\r\n    }\r\n\r\n    private jXPathFor(path: string) {\r\n        let p:JXPath = this.pathPool[path];\r\n        if (!p) {\r\n            p = new JXPath(path);\r\n            this.pathPool[path] = p;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    setRootNode(node:any) {\r\n        this.rootNode = this.nodeList(node);\r\n        this.initPools(this.templates);\r\n    }\r\n    setContextNode(node) {\r\n        this.contextNode = node;\r\n    }\r\n    templateForName(name) {\r\n        return this.templates[name];\r\n    }\r\n    // if node is null, root node will be used.\r\n    nodeList(node) {\r\n        const item = node === null ? this.rootNode : node;\r\n        let list;\r\n\r\n        if (item instanceof Array) {\r\n            list = item;\r\n         } else {\r\n             const x = Object.keys(item);\r\n             list = [];\r\n             for (let t = 0; t < x.length; t++) {\r\n                const xItem = x[t];\r\n                if (item[xItem] instanceof Array) {\r\n                    list = list.concat(item[xItem]);\r\n                } else {\r\n                    list.push(item[xItem]);\r\n                }\r\n            }\r\n         }\r\n         return list;\r\n    }\r\n\r\n    // performs query of nested function calls on the given node.\r\n    query(command:string, node) {\r\n        const mothods =this.toQueryOperation(command);\r\n\r\n        if (node instanceof Array) {\r\n            let list = [];\r\n            for (let q = 0; q < node.length; q++) {\r\n                const nodeItem = node[q];\r\n                list = list.concat(this.invoke(mothods, nodeItem))\r\n            };\r\n            return list;\r\n        }\r\n        return this.invoke(mothods, node);\r\n    }\r\n\r\n    // performs query with given list of query opertations\r\n    invoke(operation:QueryOperation, node) {\r\n        let list:any = [];\r\n        if ((typeof node === \"object\") && (node instanceof Array) && node.length === 0) {\r\n            list = [];\r\n        } else if (typeof operation === 'object') {\r\n            const f = this.supportedMethods[operation.name];\r\n            if (f) {\r\n                if (operation.args instanceof Array) {\r\n                    for (let a = 0; a < operation.args.length; a++) {\r\n                        const arg = operation.args[a]\r\n                        if (arg.name) {\r\n                            list.push(this.invoke(arg, node));\r\n                        } else {\r\n                            list.push(arg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    list.push(operation.args);\r\n                }\r\n                // list.push(node);\r\n                const oldContext = this.contextNode;\r\n                this.contextNode = node;\r\n                list = f.apply(this, list);\r\n                this.contextNode = oldContext;\r\n            } else {\r\n                list = operation.name;\r\n            }\r\n        } else {\r\n            list = operation;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // concatenate(a, b, c): joins arguments into a string\r\n    // join args[0,1,2]\r\n    concatenate(...args) {\r\n        const left = args[0];\r\n        const delim= args[1];\r\n        const right= args[2];\r\n        const result = [];\r\n\r\n        if (left instanceof Array) {\r\n            if (right instanceof Array) {\r\n                if (left.length > right.length) {\r\n                    for (let q = 0; q < left.length; q++) {\r\n                        result.push( left[q] + delim + (right.length > q ? right[q] : \"\"));\r\n                    };\r\n                } else {\r\n                    for (let q = 0; q < right.length; q++) {\r\n                        result.push( (left.length > q ? left[q] : \"\") + delim + right[q]);\r\n                    };\r\n                }\r\n            } else {\r\n                for (let q = 0; q < left.length; q++) {\r\n                    result.push( left[q] + delim + right);\r\n                };\r\n            }\r\n        } else {\r\n            if (right instanceof Array) {\r\n                for (let q = 0; q < right.length; q++) {\r\n                    result.push( left + delim + right[q]);\r\n                };\r\n            } else {\r\n                result.push(left + delim + right);\r\n            }\r\n        }\r\n        return result.length > 1 ? result : result[0];\r\n    }\r\n    // split(item,','): splits value into a list\r\n    // split args[0] with args[1]\r\n    split(...args) {\r\n        return args[0] ? args[0].split(args[1]) : [];\r\n    }\r\n    // valueOf(path):  evaluates value of argument path\r\n    // path = args[0], node to evaluate = args[1]\r\n    valueOf(...args) {\r\n        const jpath = this.jXPathFor(args[0]);\r\n        return jpath.valueOf(this.contextNode);\r\n    }\r\n    // each(list,method): For each item in list, invode the callback method\r\n    // each item of args[0] execute function of args[1]\r\n    each(...args) {\r\n        const list = [];\r\n        const method = {name: \"valueOf\", args: args[1]};\r\n        \r\n        for (let q = 0; q < args[0].length; q++) {\r\n            const node = args[0][q];\r\n            list.push(this.invoke(method, node));\r\n        };\r\n        return list;\r\n    }\r\n    // enlist(...): insert argument values into a list\r\n    enlist(...args) {\r\n        const list = [];\r\n        args.map( (item) => {\r\n            list.push(item); // make sure last two item are not node and template\r\n        })\r\n        return list;\r\n    }\r\n    // join(array,','): joins items of the list into a string\r\n    join(...args) {\r\n        return args[0].length > 1 ? args[0].join(args[1]) : args[0];\r\n    }\r\n    // apply(template,path,array): apply the template in root context for each value \r\n    // that matches the given path. args[0] name to apply\r\n    apply(...args) {\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const values = args[2];\r\n        let list = [];\r\n\r\n        for (let c = 0; c < this.rootNode.length; c++) {\r\n            const node = this.rootNode[c];\r\n            const value = path.nodeOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,\"=\", values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(node);\r\n                if (this.evaluateOperation(x,\"=\", values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        };\r\n        if (list.length) {\r\n            list = this.style(args[0], list);\r\n        }\r\n        return list;\r\n    }\r\n    // match(template,path,operation,values): , node args[4]\r\n    // for value of target in given template nodes, evaluate operation for given value(s). \r\n    match(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        const path = this.jXPathFor(args[1]);\r\n        const path2= path.fromLast();\r\n        const operation = args[2];\r\n        const values = args[3];\r\n        const nodes = this.templateNodes(template, this.contextNode)\r\n        const list = [];\r\n        if (nodes instanceof Array) {\r\n            for (let c = 0; c < nodes.length; c++) {\r\n                const node = nodes[c];\r\n                const value = path.nodeOf(node);\r\n                if (value instanceof Array) {\r\n                    for (let d = 0; d < value.length; d++) {\r\n                        const v = value[d];\r\n                        const x = path2.valueOf(v);\r\n                        if (this.evaluateOperation(x,operation, values)) {\r\n                            list.push(v);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const x = path2.valueOf(node);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            const value = path.nodeOf(nodes);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    const x = path2.valueOf(v);\r\n                    if (this.evaluateOperation(x,operation, values)) {\r\n                        list.push(v);\r\n                    }\r\n                }\r\n            } else {\r\n                const x = path2.valueOf(nodes);\r\n                if (this.evaluateOperation(x,operation, values)) {\r\n                    list.push(nodes);\r\n                }\r\n            }\r\n        \r\n        }\r\n       return list;\r\n    }\r\n    // filter(path,operation,value): for value of target in current context, \r\n    // evaluate operation for given value(s). Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and for string value means indexOf. '!' means not equal or not in.\r\n    filter(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        const operation = args[1];\r\n        const values = args[2];\r\n        const list = [];\r\n        for (let a = 0; a < this.contextNode.length; a++) {\r\n            const node = this.contextNode[a];\r\n            const value = path.valueOf(node);\r\n            if (value instanceof Array) {\r\n                for (let d = 0; d < value.length; d++) {\r\n                    const v = value[d];\r\n                    if (this.evaluateOperation(v,operation, values)) {\r\n                        list.push(node);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.evaluateOperation(value,operation, values)) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // select(path): select the nodes with given path in current context\r\n    select(...args) {\r\n        const path = this.jXPathFor(args[0]);\r\n        let list = [];\r\n        if (this.contextNode instanceof Array) {\r\n            for (let d = 0; d < this.contextNode.length; d++) {\r\n                const node = this.contextNode[d];\r\n                const value = path.nodeOf(node);\r\n                if (value && value.length) {\r\n                    list.push(node);\r\n                }\r\n            }\r\n        } else {\r\n            const value = path.nodeOf(this.contextNode);\r\n            if (value && value.length) {\r\n                if (value instanceof Array) {\r\n                    list = value;\r\n                } else {\r\n                    list.push(value);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n    // style(template, array): apply the given template for the given array\r\n    style(...args) {\r\n        const template:Template = this.templateForName(args[0]);\r\n\r\n        if (!template) {\r\n            throw {\r\n                message: \"Missing Template definition for '\" + args[0] + \"'.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        const result = [];\r\n        const attrs = Object.keys(template.style);\r\n    \r\n        if (args[1] instanceof Array) {\r\n            for (let a = 0; a < args[1].length; a++) {\r\n                const item = args[1][a];\r\n                const node = {};\r\n                for (let d = 0; d < attrs.length; d++) {\r\n                    const attr = attrs[d];\r\n                    node[attr] = this.invoke(template.style[attr], item);\r\n                }\r\n                result.push(node);\r\n            }\r\n        } else {\r\n            const node = {};\r\n            for (let d = 0; d < attrs.length; d++) {\r\n                const attr = attrs[d];\r\n                node[attr] = this.invoke(template.style[attr], args[1]);\r\n            }\r\n            result.push(node);\r\n        }\r\n        return result;\r\n    }\r\n    addSupportingMethod(name, method) {\r\n        this.supportedMethods[name] = method;\r\n    }\r\n     private removeQuotes(str) {\r\n        return (str.length && str[0] === '\\'' && str[str.length-1] === '\\'') ? str.substring(1,str.length-1) : str;\r\n    }\r\n    toQueryOperation(methods) {\r\n        const operations = methods.replace(/([^']+)|('[^']+')/g, function($0, $1, $2) {\r\n            if ($1) {\r\n                return $1.replace(/\\s/g, '');\r\n            } else {\r\n                return $2; \r\n            } \r\n        }).replace(/'[^']+'/g, function (match) {\r\n            return match.replace(/,/g, '~');\r\n        });\r\n        return this.toFunctions(operations);\r\n    }\r\n    private toFunctions(item){\r\n        // if item = join(enlist(valueOf(address.street),valueOf(address.city),valueOf(address.zipcode)),',')\r\n        let i = -1;\r\n        let j = -1;\r\n        let k = -1;\r\n        let c = 0;\r\n        let json: any = {};\r\n        for (let cindex = 0; cindex < item.length; cindex++) {\r\n            if (item[cindex] === '(') {\r\n                if (c === 0) {\r\n                    i = cindex;\r\n                }\r\n                c++;\r\n            } else if (item[cindex] === ')') {\r\n                c--;\r\n                if (c === 0){\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    j = cindex;\r\n                    if (!isArry && (j === (item.length - 1))) {\r\n                        json[\"name\"] = item.substring(0, i);\r\n                        json[\"args\"] = this.toFunctions(item.substring(i+1,j));\r\n                    } else {\r\n                        if (!isArry) {\r\n                            json = [];\r\n                        }\r\n                        json.push({ \r\n                            name: item.substring(k+1, i), \r\n                            args: this.toFunctions(item.substring(i+1,j)) \r\n                        });\r\n                    }\r\n                }\r\n            } else if (item[cindex] === ',') {\r\n                if (c === 0 && (cindex-1 !== k)) {\r\n                    const isArry = (json instanceof Array);\r\n\r\n                    if (k < 0) {\r\n                        if (i < 0) {\r\n                            if (!isArry) {\r\n                                json = [];\r\n                            }\r\n                            json.push({\r\n                                name: this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ',')),\r\n                                args: []\r\n                            });\r\n                        }\r\n                        k = cindex;\r\n                    } else {\r\n                        const x = this.removeQuotes(item.substring(k+1, cindex).replace(/~/g, ','));\r\n                        if (x.indexOf('(') < 0) {\r\n                            if (json instanceof Array) {\r\n                                json.push(x);\r\n                            } else {\r\n                                json.args.push(x);\r\n                            }\r\n                        }\r\n                        k = cindex;\r\n                    }\r\n                } else if (c === 0 && (cindex-1 === k)) {\r\n                    k = cindex;\r\n                }\r\n            }\r\n        }\r\n        if (i >= 0 && j < 0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing ')'\",\r\n                stack: new Error().stack\r\n            };\r\n        } else if (i<0 && j>0) {\r\n            throw {\r\n                message: \"incorrect method call declaration. Missing '('\",\r\n                stack: new Error().stack\r\n            };\r\n        }else if (i < 0 && j < 0 && k < 0) {\r\n            return item;\r\n        }else if (c === 0 && k > j) {\r\n            if (json instanceof Array) {\r\n                json.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            } else {\r\n                json.args.push(this.removeQuotes(item.substring(k+1, item.length).replace(/~/g, ',')));\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    templateNodes(template:Template, nodes) {\r\n        let list = [];\r\n        let nodeList = nodes;\r\n\r\n        if (template.context === \"root\") {\r\n            if (!this.rootNode) {\r\n                throw {\r\n                    message:\"Unable to find root node to perform operation.\",\r\n                    stack: new Error().stack\r\n                };\r\n            }\r\n            nodeList = this.nodeList(this.rootNode);\r\n        }    \r\n        if (template.match && template.match.length) {\r\n            const path = this.jXPathFor(template.match);\r\n\r\n            for (let z = 0; z < nodeList.length; z++) {\r\n                const node = nodeList[z];\r\n                if (path.valueOf(node) === template.value) {\r\n                    list.push(node);\r\n                }\r\n            }       \r\n        } else if (nodes) {\r\n            list = nodeList;\r\n        }\r\n        return list;\r\n    }\r\n    // Supported operations are `=,<,>,in,!`. 'in' for list values mean contains and\r\n    // for string value means indexOf. '!' means not equal or not in.\r\n    private evaluateOperation(left, operation, right) {\r\n        let result = false;\r\n        if (right instanceof Array) {\r\n            if (operation === \"=\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (operation === \"in\") {\r\n                for (let i=0;i<right.length;i++){\r\n                    if (right[i].indexOf(left) >= 0){\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                };\r\n            } else if (operation === \"!\") {\r\n                let f = false;\r\n                for (let i=0;i<right.length;i++){\r\n                    if (left == right[i]){\r\n                        f = true;\r\n                        break;\r\n                    }\r\n                };\r\n                result = !f;\r\n            }\r\n\r\n        } else {\r\n            if (operation === \"=\") {\r\n                result = (left == right);\r\n            } else if (operation === \"in\") {\r\n                result = (right.indexOf(left) >= 0);\r\n            } else if (operation === \"!\") {\r\n                result = (left !== right);\r\n            } else if (operation === \">\") {\r\n                result = (parseFloat(left) > parseFloat(right));\r\n            } else if (operation === \"<\") {\r\n                result = (parseFloat(left) < parseFloat(right));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // offPool(template,key): Will use the given template pool to pick up item(s) with given key(s)\r\n    private offPool(...args) {\r\n        const list = [];\r\n        const pool = this.globalPool[args[0]];\r\n        const keys = args[1];\r\n        if (!pool) {\r\n            throw {\r\n                message: \"Attempting to access pool '\" + args[0] + \"' that is not created.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (keys instanceof Array){\r\n            for (let z=0; z < keys.length; z++) {\r\n                const key = keys[z];\r\n                const node = pool[key];\r\n                if (node) {\r\n                    list.push(node);\r\n                } else {\r\n                    // should we throw here?\r\n                }\r\n            }\r\n        } else {\r\n            const node = pool[keys];\r\n            if (node) {\r\n                list.push(node);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n   \r\n    initTemplates(list) {\r\n        this.templates = {};\r\n        for (let i=0; i < list.length; i++){\r\n            const template: any= list[i];\r\n            const styles = Object.keys(template.style)\r\n            for (let j = 0; j < styles.length; j++) {\r\n                const key = styles[j];\r\n                const method = template.style[key];\r\n                if (typeof method === \"string\") {\r\n                    template.style[key] = this.toQueryOperation(method);\r\n                }\r\n            }\r\n            this.templates[template.name] = template;\r\n        }\r\n    }\r\n    initPools(templates) {\r\n        const list = Object.keys(templates);\r\n        if (list.length === 0) {\r\n            throw {\r\n                message: \"Missing Template definitions.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n        if (!this.rootNode) {\r\n            throw {\r\n                message: \"Unable to find root node to perform operation.\",\r\n                stack: new Error().stack\r\n            };\r\n        }\r\n\r\n        this.globalPool = {};\r\n\r\n        for (let i=0; i < list.length; i++){\r\n            const template: string = list[i];\r\n            const t = this.templateForName(template);\r\n            if (t.inPool) {\r\n                const pool = {};\r\n                const path = this.jXPathFor(t.inPool);\r\n                const match= t.match;\r\n                const nodes= this.rootNode;\r\n                if (match && t.value) {\r\n                    const mpath = this.jXPathFor(match);\r\n                    \r\n                    for (let k=0; k < nodes.length; k++){\r\n                        const v = mpath.valueOf(nodes[k]);\r\n                        if (v === t.value) {\r\n                            pool[path.valueOf(nodes[k])] = nodes[k];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let k=0; k < nodes.length; k++){\r\n                        pool[path.valueOf(nodes[k])] = nodes[k];\r\n                    }\r\n                }\r\n                this.globalPool[t.name] = pool;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { JXPath, Inquirer, Template } from './inquirer';\r\n/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\n\r\nexport interface Transformations {\r\n    name: string,\r\n    importUrls?:string[],\r\n    rootTemplate: string,\r\n    onResult?: string,\r\n    templates: Template[]\r\n}\r\n\r\nexport class Styler  {\r\n\r\n    private transformations: Transformations;\r\n    private inquirer:Inquirer;\r\n\r\n    constructor(transformations:Transformations) {\r\n        this.inquirer = new Inquirer();\r\n        this.transformations = transformations;\r\n        this.inquirer.initTemplates(this.transformations.templates);\r\n    }\r\n\r\n    public changeRootNode(node:any) {\r\n        this.inquirer.setRootNode(node);\r\n    }\r\n\r\n    public transform() {\r\n        let result = [];\r\n        const template:Template = this.inquirer.templateForName(this.transformations.rootTemplate);\r\n        \r\n        if (template) {\r\n            const attrs = Object.keys(template.style);\r\n            const nodeList = this.inquirer.templateNodes(template, this.inquirer.nodeList(null));\r\n    \r\n            for(let i = 0; i < nodeList.length; i++) {\r\n                const currentNode = nodeList[i];\r\n                const resultingNode = {};\r\n                for( let j = 0; j < attrs.length; j++) {\r\n                    const attr = attrs[j];\r\n                    resultingNode[attr] = this.inquirer.invoke(template.style[attr], currentNode);\r\n                };\r\n                result.push(resultingNode);\r\n            };\r\n        }\r\n        if(this.transformations.onResult && this.transformations.onResult.length) {\r\n            const functions = this.inquirer.toQueryOperation(this.transformations.onResult);\r\n            result = this.inquirer.invoke(functions, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * tool to display result of a search on set of points of interests on objects.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Styler, Transformations } from './transformations';\r\n\r\n@Component({\r\n  selector: 'xjslt',\r\n  template: ``,\r\n  styles: [],\r\n})\r\nexport class XjsltComponent implements OnInit, OnChanges  {\r\n  \r\n  private styler;\r\n\r\n  @Input(\"node\")\r\n  node = {};\r\n\r\n  @Input(\"transformations\")\r\n  transformations: Transformations;\r\n\r\n  @Output(\"ontransformation\")\r\n  ontransformation = new EventEmitter();\r\n\r\n  @Output(\"onerror\")\r\n  onerror = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.node && this.transformations) {\r\n      if(!this.styler) {\r\n        this.styler = new Styler(this.transformations);\r\n      }\r\n      this.styler.changeRootNode(this.node);\r\n      try {\r\n        this.ontransformation.emit(this.styler.transform());\r\n      } catch(e) {\r\n        console.log(e)\r\n        this.onerror.emit(e);\r\n      }\r\n    }\r\n  }\r\n  ngOnChanges(chages) {\r\n    if (chages.transformations) {\r\n      this.styler = undefined;\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    } else if (chages.node) {\r\n      setTimeout(this.ngOnInit.bind(this), 333);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { XjsltComponent } from './components/extensible-json-transformations';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    XjsltComponent,\r\n  ],\r\n  exports: [\r\n    XjsltComponent,\r\n  ],\r\n  entryComponents: [\r\n    XjsltComponent\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class XjsltModule {}\r\n"],"names":[],"mappings":";;;;;;;IAoBA;IAEI,gBAAY,KAAK;QACb,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAChC;;;;IACD,yBAAQ;;;IAAR;QACI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACtD;;;;;IACD,uBAAM;;;;IAAN,UAAO,IAAI;QACP,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACxC;;;;;;IACO,wBAAO;;;;;cAAC,IAAI,EAAE,IAAc;;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,KAAK,YAAY,KAAK,EAAE;;gBACxB,IAAM,IAAI,GAAG,EAAE,CAAC;gBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACvC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;oBACtB,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnE,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;wBACjB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAChB;iBACJ;gBACD,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,KAAK,GAAG,IAAI,CAAC;iBAChB;gBACD,MAAM;aACT;iBAAM;gBACH,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aAC1C;SACJ;QACD,OAAO,KAAK,CAAC;;;;;;IAEjB,wBAAO;;;;IAAP,UAAQ,IAAI;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC;;;;;;IACO,yBAAQ;;;;;cAAC,IAAI,EAAE,IAAc;;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,KAAK,YAAY,KAAK,EAAE;;gBAC1B,IAAM,IAAI,GAAG,EAAE,CAAC;gBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACzC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACtE;gBACD,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM;aACP;iBAAM,IAAI,IAAI,CAAC,MAAM,EAAE;gBACpB,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aAC1C;iBAAM;gBACF,KAAK,GAAG,KAAK,CAAC;aAClB;SACJ;QACD,OAAO,KAAK,CAAC;;iBAzErB;IA2EC,CAAA;AAvDD,IAyDA;IASI;gCAP2B,EAAE;yBACT,EAAE;0BAGD,EAAE;wBACJ,EAAE;QAGjB,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACrD;;;;;IAEO,4BAAS;;;;cAAC,IAAY;;QAC1B,IAAI,CAAC,GAAU,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,CAAC,EAAE;YACJ,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,CAAC,CAAC;;;;;;IAGb,8BAAW;;;;IAAX,UAAY,IAAQ;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClC;;;;;IACD,iCAAc;;;;IAAd,UAAe,IAAI;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KAC3B;;;;;IACD,kCAAe;;;;IAAf,UAAgB,IAAI;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC/B;;;;;;IAED,2BAAQ;;;;IAAR,UAAS,IAAI;;QACT,IAAM,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;QAClD,IAAI,IAAI,CAAC;QAET,IAAI,IAAI,YAAY,KAAK,EAAE;YACvB,IAAI,GAAG,IAAI,CAAC;SACd;aAAM;;YACH,IAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,GAAG,EAAE,CAAC;YACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAChC,IAAM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,EAAE;oBAC9B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBACnC;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC1B;aACJ;SACH;QACD,OAAO,IAAI,CAAC;KAChB;;;;;;;IAGD,wBAAK;;;;;IAAL,UAAM,OAAc,EAAE,IAAI;;QACtB,IAAM,OAAO,GAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE9C,IAAI,IAAI,YAAY,KAAK,EAAE;;YACvB,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAClC,IAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAA;aACrD;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACrC;;;;;;;IAGD,yBAAM;;;;;IAAN,UAAO,SAAwB,EAAE,IAAI;;QACjC,IAAI,IAAI,GAAO,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,IAAI,KAAK,QAAQ,MAAM,IAAI,YAAY,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5E,IAAI,GAAG,EAAE,CAAC;SACb;aAAM,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;;YACtC,IAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,EAAE;gBACH,IAAI,SAAS,CAAC,IAAI,YAAY,KAAK,EAAE;oBACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;wBAC5C,IAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;wBAC7B,IAAI,GAAG,CAAC,IAAI,EAAE;4BACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;yBACrC;6BAAM;4BACH,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBAClB;qBACJ;iBACJ;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBAC7B;;gBAED,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;gBACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC3B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;aACjC;iBAAM;gBACH,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;aACzB;SACJ;aAAM;YACH,IAAI,GAAG,SAAS,CAAC;SACpB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAID,8BAAW;;;;IAAX;QAAY,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACf,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QACrB,IAAM,KAAK,GAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;QACrB,IAAM,KAAK,GAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;QACrB,IAAM,MAAM,GAAG,EAAE,CAAC;QAElB,IAAI,IAAI,YAAY,KAAK,EAAE;YACvB,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE;oBAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAClC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;qBACtE;iBACJ;qBAAM;oBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACnC,MAAM,CAAC,IAAI,CAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBACrE;iBACJ;aACJ;iBAAM;gBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;iBACzC;aACJ;SACJ;aAAM;YACH,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,MAAM,CAAC,IAAI,CAAE,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzC;aACJ;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;aACrC;SACJ;QACD,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;KACjD;;;;;;;IAGD,wBAAK;;;;IAAL;QAAM,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QACT,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;KAChD;;;;;;;IAGD,0BAAO;;;;IAAP;QAAQ,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACX,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1C;;;;;;;IAGD,uBAAI;;;;IAAJ;QAAK,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACR,IAAM,IAAI,GAAG,EAAE,CAAC;;QAChB,IAAM,MAAM,GAAG,EAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC;QAEhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YACrC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;SACxC;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAED,yBAAM;;;;IAAN;QAAO,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACV,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,CAAE,UAAC,IAAI;YACX,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnB,CAAC,CAAA;QACF,OAAO,IAAI,CAAC;KACf;;;;;;IAED,uBAAI;;;;IAAJ;QAAK,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QACR,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;KAC/D;;;;;;;IAGD,wBAAK;;;;IAAL;QAAM,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACT,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QACrC,IAAM,KAAK,GAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;;QAC7B,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QACvB,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;YAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACnC,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;oBACnB,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,GAAG,EAAE,MAAM,CAAC,EAAE;wBACvC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAChB;iBACJ;aACJ;iBAAM;;gBACH,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,GAAG,EAAE,MAAM,CAAC,EAAE;oBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;aACJ;SACJ;QACD,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAGD,wBAAK;;;;IAAL;QAAM,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACT,IAAM,QAAQ,GAAY,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,IAAI,CAAC,QAAQ,EAAE;YACX,MAAM;gBACF,OAAO,EAAE,mCAAmC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;gBAC7D,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QACrC,IAAM,KAAK,GAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;;QAC7B,IAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QACvB,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;;QAC5D,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACnC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;gBACtB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,KAAK,YAAY,KAAK,EAAE;oBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;wBACnC,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;wBACnB,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;4BAC7C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBAChB;qBACJ;iBACJ;qBAAM;;oBACH,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;wBAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACnB;iBACJ;aACJ;SACJ;aAAM;;YACH,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACnC,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;oBACnB,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;wBAC7C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAChB;iBACJ;aACJ;iBAAM;;gBACH,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC/B,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;oBAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACpB;aACJ;SAEJ;QACF,OAAO,IAAI,CAAC;KACd;;;;;;;IAGD,yBAAM;;;;IAAN;QAAO,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACV,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QACrC,IAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;QACvB,IAAM,IAAI,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YAC9C,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;YACjC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACnC,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;wBAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACnB;iBACJ;aACJ;iBAAM;gBACH,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE;oBACjD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAED,yBAAM;;;;IAAN;QAAO,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACV,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QACrC,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,IAAI,CAAC,WAAW,YAAY,KAAK,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAC9C,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;gBACjC,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;oBACvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;aACJ;SACJ;aAAM;;YACH,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC5C,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;gBACvB,IAAI,KAAK,YAAY,KAAK,EAAE;oBACxB,IAAI,GAAG,KAAK,CAAC;iBAChB;qBAAM;oBACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACpB;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAED,wBAAK;;;;IAAL;QAAM,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACT,IAAM,QAAQ,GAAY,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,IAAI,CAAC,QAAQ,EAAE;YACX,MAAM;gBACF,OAAO,EAAE,mCAAmC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;gBAC7D,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;;QAED,IAAM,MAAM,GAAG,EAAE,CAAC;;QAClB,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,KAAK,EAAE;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACrC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;gBACxB,IAAM,IAAI,GAAG,EAAE,CAAC;gBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACnC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;iBACxD;gBACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;SACJ;aAAM;;YACH,IAAM,IAAI,GAAG,EAAE,CAAC;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACnC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3D;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;QACD,OAAO,MAAM,CAAC;KACjB;;;;;;IACD,sCAAmB;;;;;IAAnB,UAAoB,IAAI,EAAE,MAAM;QAC5B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;KACxC;;;;;IACQ,+BAAY;;;;cAAC,GAAG;QACrB,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAC,CAAC,CAAC,KAAK,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,EAAC,GAAG,CAAC,MAAM,GAAC,CAAC,CAAC,GAAG,GAAG,CAAC;;;;;;IAE/G,mCAAgB;;;;IAAhB,UAAiB,OAAO;;QACpB,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE,UAAS,EAAE,EAAE,EAAE,EAAE,EAAE;YACxE,IAAI,EAAE,EAAE;gBACJ,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;aAChC;iBAAM;gBACH,OAAO,EAAE,CAAC;aACb;SACJ,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,KAAK;YAClC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SACnC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;KACvC;;;;;IACO,8BAAW;;;;cAAC,IAAI;;QAEpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;QACX,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;QACX,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;QACX,IAAI,CAAC,GAAG,CAAC,CAAC;;QACV,IAAI,IAAI,GAAQ,EAAE,CAAC;QACnB,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACjD,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,EAAE;oBACT,CAAC,GAAG,MAAM,CAAC;iBACd;gBACD,CAAC,EAAE,CAAC;aACP;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;gBAC7B,CAAC,EAAE,CAAC;gBACJ,IAAI,CAAC,KAAK,CAAC,EAAC;;oBACR,IAAM,MAAM,IAAI,IAAI,YAAY,KAAK,CAAC,CAAC;oBAEvC,CAAC,GAAG,MAAM,CAAC;oBACX,IAAI,CAAC,MAAM,KAAK,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;qBAC1D;yBAAM;wBACH,IAAI,CAAC,MAAM,EAAE;4BACT,IAAI,GAAG,EAAE,CAAC;yBACb;wBACD,IAAI,CAAC,IAAI,CAAC;4BACN,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC;4BAC5B,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAC,CAAC,CAAC,CAAC;yBAChD,CAAC,CAAC;qBACN;iBACJ;aACJ;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;gBAC7B,IAAI,CAAC,KAAK,CAAC,KAAK,MAAM,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE;;oBAC7B,IAAM,MAAM,IAAI,IAAI,YAAY,KAAK,CAAC,CAAC;oBAEvC,IAAI,CAAC,GAAG,CAAC,EAAE;wBACP,IAAI,CAAC,GAAG,CAAC,EAAE;4BACP,IAAI,CAAC,MAAM,EAAE;gCACT,IAAI,GAAG,EAAE,CAAC;6BACb;4BACD,IAAI,CAAC,IAAI,CAAC;gCACN,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gCACvE,IAAI,EAAE,EAAE;6BACX,CAAC,CAAC;yBACN;wBACD,CAAC,GAAG,MAAM,CAAC;qBACd;yBAAM;;wBACH,IAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC5E,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;4BACpB,IAAI,IAAI,YAAY,KAAK,EAAE;gCACvB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BAChB;iCAAM;gCACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACrB;yBACJ;wBACD,CAAC,GAAG,MAAM,CAAC;qBACd;iBACJ;qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,MAAM,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBACpC,CAAC,GAAG,MAAM,CAAC;iBACd;aACJ;SACJ;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACjB,MAAM;gBACF,OAAO,EAAE,gDAAgD;gBACzD,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;aAAM,IAAI,CAAC,GAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE;YACnB,MAAM;gBACF,OAAO,EAAE,gDAAgD;gBACzD,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;aAAK,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;aAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACxB,IAAI,IAAI,YAAY,KAAK,EAAE;gBACvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aACrF;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;aAC1F;SACJ;QACD,OAAO,IAAI,CAAC;;;;;;;IAGhB,gCAAa;;;;;IAAb,UAAc,QAAiB,EAAE,KAAK;;QAClC,IAAI,IAAI,GAAG,EAAE,CAAC;;QACd,IAAI,QAAQ,GAAG,KAAK,CAAC;QAErB,IAAI,QAAQ,CAAC,OAAO,KAAK,MAAM,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,MAAM;oBACF,OAAO,EAAC,gDAAgD;oBACxD,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;iBAC3B,CAAC;aACL;YACD,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3C;QACD,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE;;YACzC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACtC,IAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,EAAE;oBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;aACJ;SACJ;aAAM,IAAI,KAAK,EAAE;YACd,IAAI,GAAG,QAAQ,CAAC;SACnB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;IAGO,oCAAiB;;;;;;cAAC,IAAI,EAAE,SAAS,EAAE,KAAK;;QAC5C,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,IAAI,SAAS,KAAK,GAAG,EAAE;gBACnB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;oBAC5B,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,EAAC;wBACjB,MAAM,GAAG,IAAI,CAAC;wBACd,MAAM;qBACT;iBACJ;aACJ;iBAAM,IAAI,SAAS,KAAK,IAAI,EAAE;gBAC3B,KAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;oBAC5B,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;wBAC5B,MAAM,GAAG,IAAI,CAAC;wBACd,MAAM;qBACT;iBACJ;aACJ;iBAAM,IAAI,SAAS,KAAK,GAAG,EAAE;;gBAC1B,IAAI,CAAC,GAAG,KAAK,CAAC;gBACd,KAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC;oBAC5B,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,EAAC;wBACjB,CAAC,GAAG,IAAI,CAAC;wBACT,MAAM;qBACT;iBACJ;gBACD,MAAM,GAAG,CAAC,CAAC,CAAC;aACf;SAEJ;aAAM;YACH,IAAI,SAAS,KAAK,GAAG,EAAE;gBACnB,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC;aAC5B;iBAAM,IAAI,SAAS,KAAK,IAAI,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aACvC;iBAAM,IAAI,SAAS,KAAK,GAAG,EAAE;gBAC1B,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC;aAC7B;iBAAM,IAAI,SAAS,KAAK,GAAG,EAAE;gBAC1B,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD;iBAAM,IAAI,SAAS,KAAK,GAAG,EAAE;gBAC1B,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD;SACJ;QACD,OAAO,MAAM,CAAC;;;;;;IAIV,0BAAO;;;;;QAAC,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;;QACnB,IAAM,IAAI,GAAG,EAAE,CAAC;;QAChB,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QACtC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,EAAE;YACP,MAAM;gBACF,OAAO,EAAE,6BAA6B,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,wBAAwB;gBAC3E,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;QACD,IAAI,IAAI,YAAY,KAAK,EAAC;YACtB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAChC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;gBACpB,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB,AAEA;aACJ;SACJ;aAAM;;YACH,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;SACJ;QACD,OAAO,IAAI,CAAC;;;;;;IAGhB,gCAAa;;;;IAAb,UAAc,IAAI;QACd,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;;YAC/B,IAAM,QAAQ,GAAO,IAAI,CAAC,CAAC,CAAC,CAAC;;YAC7B,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACpC,IAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;gBACtB,IAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBAC5B,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;iBACvD;aACJ;YACD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;SAC5C;KACJ;;;;;IACD,4BAAS;;;;IAAT,UAAU,SAAS;;QACf,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,MAAM;gBACF,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM;gBACF,OAAO,EAAE,gDAAgD;gBACzD,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,KAAK;aAC3B,CAAC;SACL;QAED,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;;YAC/B,IAAM,QAAQ,GAAW,IAAI,CAAC,CAAC,CAAC,CAAC;;YACjC,IAAM,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YACzC,IAAI,CAAC,CAAC,MAAM,EAAE;;gBACV,IAAM,IAAI,GAAG,EAAE,CAAC;;gBAChB,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;;gBACtC,IAAM,KAAK,GAAE,CAAC,CAAC,KAAK,CAAC;;gBACrB,IAAM,KAAK,GAAE,IAAI,CAAC,QAAQ,CAAC;gBAC3B,IAAI,KAAK,IAAI,CAAC,CAAC,KAAK,EAAE;;oBAClB,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBAEpC,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;;wBAChC,IAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE;4BACf,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC3C;qBACJ;iBACJ;qBAAM;oBACH,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;wBAChC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC3C;iBACJ;gBACD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;aAClC;SACJ;KACJ;mBAxrBL;IAyrBC;;;;;;ACzrBD,IAaA;IAKI,gBAAY,eAA+B;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;KAC/D;;;;;IAEM,+BAAc;;;;cAAC,IAAQ;QAC1B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;;;;IAG7B,0BAAS;;;;;QACZ,IAAI,MAAM,GAAG,EAAE,CAAC;;QAChB,IAAM,QAAQ,GAAY,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAE3F,IAAI,QAAQ,EAAE;;YACV,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;YAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAErF,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBACrC,IAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;gBAChC,IAAM,aAAa,GAAG,EAAE,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACnC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtB,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;iBACjF;gBACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC9B;SACJ;QACD,IAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE;;YACtE,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAChF,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACpD;QACD,OAAO,MAAM,CAAC;;iBAlDtB;IAoDC;;;;;;ACjDD;;oBAoBS,EAAE;gCAMU,IAAI,YAAY,EAAE;uBAG3B,IAAI,YAAY,EAAE;;;;;IAE5B,iCAAQ;;;IAAR;QACE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;YACrC,IAAG,CAAC,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAChD;YACD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI;gBACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;aACrD;YAAC,OAAM,CAAC,EAAE;gBACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACtB;SACF;KACF;;;;;IACD,oCAAW;;;;IAAX,UAAY,MAAM;QAChB,IAAI,MAAM,CAAC,eAAe,EAAE;YAC1B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3C;aAAM,IAAI,MAAM,CAAC,IAAI,EAAE;YACtB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3C;KACF;;gBA1CF,SAAS,SAAC;oBACT,QAAQ,EAAE,OAAO;oBACjB,QAAQ,EAAE,EAAE;iBAEb;;;uBAKE,KAAK,SAAC,MAAM;kCAGZ,KAAK,SAAC,iBAAiB;mCAGvB,MAAM,SAAC,kBAAkB;0BAGzB,MAAM,SAAC,SAAS;;yBA/BnB;;;;;;;ACAA;;;;gBAMC,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,YAAY;qBACb;oBACD,YAAY,EAAE;wBACZ,cAAc;qBACf;oBACD,OAAO,EAAE;wBACP,cAAc;qBACf;oBACD,eAAe,EAAE;wBACf,cAAc;qBACf;oBACD,SAAS,EAAE,EACV;oBACD,OAAO,EAAE,CAAC,sBAAsB,CAAC;iBAClC;;sBAtBD;;;;;;;;;;;;;;;"}
